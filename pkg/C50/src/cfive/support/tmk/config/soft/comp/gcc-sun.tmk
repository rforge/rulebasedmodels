#
# gcc.tmk 
# $Id: gcc-sun.tmk,v 1.1 2005/04/23 20:53:58 yamauchih Exp $
# configure EGCS / GNU C/C++ compilers for SunOS
#

assert {![string compare $OS SunOS]}

# Sun specialities 
lappend ::${__module}::FLAGS -fPIC
config set METAOPT(64bit)    -m64   

# Definition for SunOS : rpathflag
#
# generate all flags for linking libs with what we are generating.
# recognized options:
# - rpath: store runtime linker paths in lib
# - circular: resolve circular inter-lib symbol dependencies 
# - twice: obsolete, should use "circular"
config proc make_lib_options {libspec opt_expr} {

    set paths {}
    set libs  {}
    
    # ??? wie kann das sein ??? depends on system. -R or -Wl,-rpath,
    set rpathflag -R
    
    # ??? muss das echt sein? und was ist mit /usr/local? ???
    # set paths -L/usr/lib $rpathflag/usr/lib

    # expand options expression, look for some of the options
    eval set opt \[list $opt_expr\]
    set circ [expr [lcontains $opt circular] || [lcontains $opt twice]]
    set rpath [lcontains $opt rpath]

    # process pairs (dir shortname)
    foreach lib [::link::libspec projlib_list $libspec] {
	
	set dir  [lindex $lib 0]
	set name [lindex $lib 1]
	if {![file isdirectory $dir]} {
	    exit_msg "directory $dir does not exist."
	}
	lappend paths -L[file nativename $dir]
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
	lappend libs -l[file nativename ${name}]
    }
    
    # lib path + sys libs
    foreach dir [::link::libspec libpath $libspec] {
	lappend paths -L[file nativename $dir] 
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
    }
    foreach lib [::link::libspec syslibs $libspec] {
	lappend libs -l[file nativename $lib]
    }
    
    # resolve circular inter-lib dependencies?
    # well, we can't really do this, so we just put every lib twice
    if {$circ && ([llength $libs] > 1)} {
	return [list {*}$paths {*}$libs {*}$libs]
    } else {
	return [list {*}$paths {*}$libs]
    }
}
