#
# gcc.tmk
# $Id: gcc.tmk,v 1.36 2007/10/26 11:37:02 cfuchs_sf Exp $
# configure EGCS / GNU C/C++ compilers : general setting.
#

#
# try to find executables, so we don't need this in the site config
# User can specify the gcc name like tmk -setrunmode gccexename=gcc-3.4
#

#override default OS settings for filname_obj
config proc ::filename_obj {shortname} {return $shortname.o}

set gccname [::tmk::get_runmodestat gccexename]

switch $__module {
    cxx {
	regsub ^gcc $gccname g++ gccname
    }
    c   {
	# no need to change the gccname
    }
    $STR_DEFAULT {log_msg "warning: gcc is not configured for module $__module" }
}

if {[lindex [config set EXECUTABLE [lreplace $gccname 0 0 \
	[auto_execok [lindex $gccname 0]]]] 0] eq {}} {

    exit_msg "Configuration failed.\n\
              gcc.tmk can not find -setrunmode gccexename=\[$gccname\].\n\
              Please make sure your gcc is on your path."
}

# does this belong HERE?
config variable ::${__module}::FLAGS

# we need 'ar' for linking static libs...
#todo: use gcc itself as AR when possible
config set AR [auto_execok ar]

# check version ...
config set VERSION unknown
catch {
    config set VERSION [string trim [exec {*}$EXECUTABLE --version 2>@stdout]]
}

if [regexp pgcc $VERSION] {
    config set BRANCH PGCC
} elseif [regexp egcs $VERSION] {
    config set BRANCH EGCS
} else {
    config set BRANCH GCC
}

#
# dumpversion
#
config set DUMPVERSION unknown
catch {
    config set DUMPVERSION [string trim [exec {*}$EXECUTABLE -dumpversion 2>@stdout]]
}

set verlist [split $DUMPVERSION .]
config set GCCRELEASE      [lindex $verlist 0]
config set GCCMINERVERSION [lindex $verlist 1]
config set GCCPATCHLEVEL   [lindex $verlist 2]

config set NEW_CPP_API 0
if [expr $GCCRELEASE >= 3] {
    if [expr $GCCMINERVERSION >= 1] {
 	lappend ::${__module}::FLAGS -DHAVE_SSTREAM
	# after 3.1
 	config set NEW_CPP_API 1
    }
}

# default flags for g++ as well as for gcc
config set FLAGS_PRF {-fPIC -g3 -pg}
config set FLAGS_DBG {-fPIC -g -Wno-uninitialized}
config set FLAGS_STD {-fPIC -O}
config set FLAGS_OPT {-fPIC -O2}
switch $BRANCH {
    PGCC {config set FLAGS_MAX [list -O6]}
    default {
	if [expr $GCCMINERVERSION >= 1] {
	    config set FLAGS_MAX [list -O6 -DNDEBUG \
		    -fomit-frame-pointer \
		    -falign-functions=4 \
		    -fexpensive-optimizations \
		    -fschedule-insns2 \
		    -finline-functions \
		    -funroll-loops]
	} else {
	    config set FLAGS_MAX [list -O6 -DNDEBUG \
		    -fomit-frame-pointer\
		    -malign-functions=4\
		    -fexpensive-optimizations\
		    -fschedule-insns2\
		    -finline-functions \
		    -funroll-loops]
	}
    }
}


if {$GCCRELEASE eq 2} {
    switch -regexp $GCCMINERVERSION {
	# 2.95.x
	95 {
	    switch -regexp $CPU {
	       pentium[2-9] {
		  lappend FLAGS_MAX -mpentiumpro -DCPU=686
	       }
	       pentium {
		  lappend FLAGS_MAX -mpentium
	       }
	       default {}
	    }
	}
	# else
	default {}	
    }
} elseif {$GCCRELEASE eq 3} {
    switch -regexp $GCCMINERVERSION {
	0 {
	    # 3.0
	    switch -regexp $CPU {
		pentium[2-9] {
		    lappend FLAGS_MAX -march=pentiumpro -mcpu=pentiumpro \
			-DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -march=pentium -mcpu=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -march=athlon -mcpu=athlon -DCPU=ATHLON
		}
		default {}
	    }
	}
	[1-3] {
	    # 3.1, 3.2, 3.3
	    switch -regexp $CPU {
		pentium4 {
		    lappend FLAGS_MAX -mfpmath=sse -march=pentium4 \
			-mcpu=pentium4 -DCPU=686
		}
		pentium3 {
		    lappend FLAGS_MAX -mfpmath=sse -march=pentium3 \
			-mcpu=pentium3 -DCPU=686
		}
		pentium2 {
		    lappend FLAGS_MAX -march=pentium2 -mcpu=pentium2 -DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -march=pentium -mcpu=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -march=athlon -mcpu=athlon -DCPU=ATHLON
		}
		sun4u {
		    lappend FLAGS_MAX -fPIC -mcpu=ultrasparc \
			-mtune=ultrasparc -DCPU=ultrasparc
		}
		"Power Macintosh" {
		    lappend FLAGS_MAX -mcpu=powerpc -maltivec -DCPU=POWERPC
		}
		default {}
	    }
	}
	4 {
	    # 3.4
	    switch -regexp $CPU {
		pentium4 {
		    lappend FLAGS_MAX -mfpmath=sse -mtune=pentium4 \
			-march=pentium4 -DCPU=686
		}
		pentium3 {
		    lappend FLAGS_MAX -mfpmath=sse -mtune=pentium3 \
			-march=pentium3 -DCPU=686
		}
		pentium2 {
		    lappend FLAGS_MAX -mtune=pentium2 -march=pentium2 -DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -mtune=pentium  -march=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -mtune=athlon -DCPU=ATHLON
		}
		opteron {
		    lappend FLAGS_MAX -mtune=opteron -march=opteron -DCPU=ATHLON
		}
		sun4u {
		    lappend FLAGS_MAX -fPIC -mtune=ultrasparc -march=ultrasparc
			-DCPU=ultraspar
		}
		"Power Macintosh" {
			lappend FLAGS_MAX -mcpu=powerpc -mtune=powerpc \
			    -maltivec -DCPU=POWERPC
		}
		default {}
	    }
	}
	
	default {
	    switch -regexp $CPU {
		pentium[2-9] {
		    lappend FLAGS_MAX -march=pentiumpro -mcpu=pentiumpro \
			-DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -march=pentium -mcpu=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -march=athlon -mcpu=athlon -DCPU=ATHLON
		}
		default {}
	    }
	}
    }
} elseif {$GCCRELEASE eq 4} {
	puts $CPU
    switch -regexp $GCCMINERVERSION {
	[0-9] {
	    switch -regexp $CPU {
		pentium4 {
		    lappend FLAGS_MAX -mfpmath=sse -mtune=pentium4 \
			-march=pentium4 -DCPU=686
		}
		pentium3 {
		    lappend FLAGS_MAX -mfpmath=sse -mtune=pentium3 \
			-march=pentium3 -DCPU=686
		}
		pentium2 {
		    lappend FLAGS_MAX -mtune=pentium2 -march=pentium2 -DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -mtune=pentium  -march=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -fPIC -mtune=opteron -DCPU=ATHLON
		}
		ix86 {
		    lappend FLAGS_MAX -fPIC -mtune=opteron -DCPU=ATHLON
		}
		opteron {
		    lappend FLAGS_MAX -fPIC -mtune=opteron -march=opteron \
			-DCPU=ATHLON
		}
		sun4u {
		    lappend FLAGS_MAX -fPIC -mtune=ultrasparc \
			-march=ultrasparc -DCPU=ultrasparc
		}
		"Power Macintosh" {
			lappend FLAGS_MAX -mcpu=powerpc -mtune=powerpc \
			    -maltivec -DCPU=POWERPC
		}
		default {}
	    }
	}

	default {
	    switch -regexp $CPU {
		pentium[2-9] {
		    lappend FLAGS_MAX -march=pentiumpro -mcpu=pentiumpro \
			-DCPU=686
		}
		pentium {
		    lappend FLAGS_MAX -march=pentium -mcpu=pentium -DCPU=586
		}
		athlon {
		    lappend FLAGS_MAX -march=athlon -mcpu=athlon -DCPU=ATHLON
		}
		default {}
	    }
	}
    }
} else {
    # 5?
    puts "FLAGS_MAX has not yet supported for gcc $DUMPVERSION."
}


if {$CPU eq "athlon" && $BRANCH ne "PGCC"} {
    if [regexp 2\.\(\[0-9\]+\) $VERSION dummyMatch minorVer] {
	if [expr $minorVer > 95] {
		lappend FLAGS_MAX -mcpu=opteron -march=opteron
	}
    }
}

# what the heck is INCTEMP?
if {$__module eq "cxx"} {
    foreach x {FLAGS_PRF FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
	lappend $x -D_INCTEMP
    }
}

#
# 64bit option
#
set addressmode [::tmk::get_runmodestat addressmode]
if {$addressmode eq "64bit"} {
    foreach x {FLAGS_PRF FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
	lappend $x -m64 -fPIC
    }
}

# default flags if this compiler is used as the linker
config set LDFLAGS_PRF -pg
config set LDFLAGS_DBG {}
config set LDFLAGS_STD {}
config set LDFLAGS_OPT {}
config set LDFLAGS_MAX {}
if {$addressmode eq "64bit"} {
    foreach x {LDFLAGS_PRF LDFLAGS_DBG LDFLAGS_STD LDFLAGS_OPT LDFLAGS_MAX} {
	lappend $x -m64 -fPIC
    }
}


# flags for some of the meta compiler options
config set METAOPT(nowarn)   -wall
config set METAOPT(warn)     {}
config set METAOPT(fullwarn) -fullwarn
config set METAOPT(ansi)     -ansi
config set METAOPT(stl)      {}
config set METAOPT(shared)   -fPIC ;# ??? really ???
# config set METAOPT(32bit)   -Wl,-n32

# with gcc we don't need an external makedepend
config set EXPLICIT_MAKEDEPEND 0

# gcc work around
# don't use optimization for a given list of object files
config proc ::gccNoOpt {_files} {
    if {($cxx::COMPILER eq "gcc") &&
	(($::CODELEVEL eq "max") || ($::CODELEVEL eq "opt"))} {
	exception $_files {::cxx::gcc::FLAGS} {
	    set ::cxx::gcc::FLAGS $::cxx::gcc::FLAGS_DBG
	}
    }
}

#-----------------------------------------------------------------
# OS depended part.
# please define OS depended proc and variables here.
#-----------------------------------------------------------------
if {$OS eq $STR_LINUX} {
    source $::tmk::dir_soft/comp/gcc-linux.tmk
} elseif {$OS eq $STR_IRIX} {
    source $::tmk::dir_soft/comp/gcc-irix.tmk
} elseif {$OS eq $STR_IRIX64} {
    source $::tmk::dir_soft/comp/gcc-irix.tmk
} elseif {$OS eq $STR_SUNOS} {
    source $::tmk::dir_soft/comp/gcc-sun.tmk
} elseif {$OSCLASS eq $STR_WINDOWS} {
    source $::tmk::dir_soft/comp/gcc-windows.tmk
} elseif {$OS eq $STR_DARWIN} {
    source $::tmk::dir_soft/comp/gcc-darwin.tmk
} else {
    log_msg "Warning! : OS ($OS) is not recognized, use default."
}

#-----------------------------------------------------------------
# config default procs when not exists.
#-----------------------------------------------------------------
# return desired meta compiler options
if {[ info procs meta_option_flags ] eq {}} {
    dbg_msg "use default meta_option_flags."
    config proc meta_option_flags {opt} {
	variable METAOPT
	set result {}
	foreach o $opt {
	    if {[info exists METAOPT($o)]} {
		dbg_msg "meta option $o: flags $METAOPT($o)" 2
		#todo: should this be {*}$METAOPT($o)?
		lappend result $METAOPT($o)
	    } else {
		dbg_msg "no flags for meta option $o" 2
	    }
	}
	return $result
    }
} else {
    dbg_msg "config proc meta_option_flags is already defined."
}

# compile a source file (C or C++)
if {[ info procs compile_obj ] eq {}} {
    dbg_msg "use default compile_obj."
    config proc compile_obj {obj src dep flags opt} {

	variable EXECUTABLE
	if [regexp async $opt] {
	    set async 1
	} else {
	    set async 0
	}

	# convert filenames to native representation, and pay attention
	#   attention that no argument is evaluated too often ('\' problem)!
	set flags [concat $flags [meta_option_flags $opt]]
	if $async {
	    set cmd [list ::tmk::cmd_thread $obj {*}$EXECUTABLE -Wp,-MD,$dep]
	} else {
	    set cmd [list cmd {*}$EXECUTABLE -Wp,-MD,$dep]
	}
	lappend cmd {*}$flags
	lappend cmd  -o $obj -c $src
	uplevel \#0 $cmd
    }
} else {
    dbg_msg "config proc compile_obj is already defined."
}

# # only update dependency file, but do not compile
if {[ info procs update_dependencies ] eq {}} {
    dbg_msg "use default update_dependencies."
    config proc update_dependencies {obj src dep flags opt} {
	variable EXECUTABLE
	# convert filenames to native representation, and pay attention
	#   attention that no argument is evaluated too often ('\' problem)!
	if [file exists $dep] {file delete $dep}
	lappend flags {*}[meta_option_flags $opt]
	puts "updating dependencies for $obj"
	set cmd [list cmd_quiet {*}$EXECUTABLE -M]
	lappend cmd -Wp,-MG -Wp,-MD,$dep
	lappend cmd {*}flags
	lappend cmd $src
	uplevel \#0 $cmd
	### why no -o option? How does gcc know which is the target???
    }
} else {
    dbg_msg "config proc update_dependencies is already defined."
}

# link a static lib
if {[ info procs link_lib ] eq {}} {
    dbg_msg "use default link_lib."
    config proc link_lib {lib obj libspec flags opt} {
	variable AR
	# hack: flags are just not passed to AR at all
	set flags [concat $flags [meta_option_flags $opt]]
	set cmd [list cmd $AR rf $lib]
	lappend cmd {*}$obj
	uplevel \#0 $cmd
	### use libspec?
    }
} else {
    dbg_msg "config proc link_lib is already defined."
}

# # link a shared lib
if {[ info procs link_shlib ] eq {}} {
    dbg_msg "use default link_shlib."
    config proc link_shlib {lib obj export_obj libspec flags opt} {
	variable EXECUTABLE
	if {$export_obj ne {}} {
	    dbg_msg "warning (gcc): no support for interface subset export"
	}
	if [regexp async $opt] {
	    set async 1
	} else {
	    set async 0
	}

	# needed?
	if [lcontains $opt soname] {
	    lappend flags -Wl,-soname=[file tail $lib]
	}
	lappend flags {*}[meta_option_flags $opt]
	set libs  [make_lib_options $libspec $opt]
	set sharedflag -shared
	if $async {
	    set cmd [list ::tmk::cmd_thread $lib {*}$EXECUTABLE $sharedflag]
	} else {
	    set cmd [list cmd {*}$EXECUTABLE $sharedflag]
	}
	lappend cmd {*}$flags -o $lib {*}$obj {*}$libs
	uplevel \#0 $cmd
    }
} else {
    dbg_msg "config proc link_shlib is already defined."
}

# link an executable
if {[ info procs link_exe ] eq {}} {
    dbg_msg "use default link_exe."
    config proc link_exe {prog obj libspec flags opt} {
	lappend flags {*}[meta_option_flags $opt]
	set libs  [make_lib_options $libspec $opt]
	
	if [regexp async $opt] {
	    set async 1
	} else {
	    set async 0
	}
	
	variable EXECUTABLE
	if $async {
	    set cmd [list ::tmk::cmd_thread $prog {*}$EXECUTABLE  {*}$flags]
	} else {
	    set cmd [list cmd {*}$EXECUTABLE {*}$flags]
	}	
	lappend cmd -o $prog {*}$obj {*}$libs
	uplevel \#0 $cmd
    }
} else {
    dbg_msg "config proc link_exe is already defined."
}

# generate all flags for linking libs with what we are generating.
# recognized options:
# - rpath: store runtime linker paths in lib
# - circular: resolve circular inter-lib symbol dependencies
# - twice: obsolete, should use "circular"
if {[ info procs make_lib_options ] eq {}} {
    dbg_msg "use default make_lib_options."
    config proc make_lib_options {libspec opt_expr} {

	set paths {}
	set libs  {}
	
	# rpathflag is depends on environment (see gcc-sunos.tmk). ??? wie kann das sein ???
	set rpathflag -Wl,-rpath,
	
	# ??? muss das echt sein? und was ist mit /usr/local? ???
	# set paths -L/usr/lib $rpathflag/usr/lib
	
	# expand options expression, look for some of the options
	eval set opt \[list $opt_expr\]
	set circ [expr [lcontains $opt circular] || [lcontains $opt twice]]
	set rpath [lcontains $opt rpath]
	
	# process pairs (dir shortname)
	foreach lib [::link::libspec projlib_list $libspec] {
	
	    set dir  [lindex $lib 0]
	    set name [lindex $lib 1]
	    if {![file isdirectory $dir]} {
		exit_msg "directory $dir does not exist."
	    }
	    lappend paths -L[file nativename $dir]
	    if $rpath {lappend paths $rpathflag[file nativename $dir]}
	    lappend libs -l[file nativename ${name}]
	}
	
	# lib path + sys libs
	foreach dir [::link::libspec libpath $libspec] {
	    lappend paths -L[file nativename $dir]
	    if $rpath {lappend paths $rpathflag[file nativename $dir]}
	}
	foreach lib [::link::libspec syslibs $libspec] {
	    lappend libs -l[file nativename $lib]
	}

	# resolve circular inter-lib dependencies?
	# well, we can't really do this, so we just put every lib twice
	if {$circ && ([llength $libs] > 1)} {
	    return [list {*}$paths {*}$libs {*}$libs]
	} else {
	    return [list {*}$paths {*}$libs]
	}
    }
} else {
    dbg_msg "config proc make_lib_options is already defined."
}
