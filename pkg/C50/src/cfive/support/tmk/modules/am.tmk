#! /bin/env tclsh

# Copyright (C) 2011-2012, Nathan Coulter and others 

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 2 of the License.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

set auto_path_original $auto_path
set auto_path [linsert $auto_path 0 \
	[file join [file dirname [info script]] tcllib]]
package require fileutil
set auto_path $auto_path_original
module tmkutil

#am__remove__distdir
proc removedir {dir} {
	if {[file isdirectory $dir]} {
		walk $dir {apply { x {
			set perms [file attributes $x -permissions]
			if [expr !($perms & 00200) ] {
				file attributes $x -permissions  [expr $perms & 00200]
			}
			file delete -force $x
		}}}
	}
}

proc install_data {datadir offset fname} {
	set fname [string range $fname $offset end]
	set fdir [file dirname $fname]
	set fdir [file join $datadir $fdir]
	mkinstdir [file join $datadir $fdir]
	if {![file isdirectory $fname]} {
		log_msg "copying $fname to $fdir"
		file copy -force $fname $fdir
	}
}

variable dest_s dest
variable lib_s lib
variable pkgdir_s pkgdir
variable pkglib_s pkglib
variable tail_s tail

namespace eval :: {

	proc mkinstdir {dir} {
			file mkdir $dir
			file attributes $dir -permissions 00755
	}

	proc archfile {fname} {
		if {[file exists [set maybe [file join $::ARCH $fname]]]} {
			set fname $maybe
		}
		#return [file join $::PROJROOT $SUBDIR $fname]
		return $fname 

	}

	proc libnames {list} {
		return [lextract $list 0]
	}

	set_ifndef prefix /usr/local
	set_ifndef bin bin
	set_ifndef sbin sbin
	set_ifndef libexec libexec
	set_ifndef data share
	set_ifndef sysconf etc
	set_ifndef sharedstate com
	set_ifndef localstate var
	set_ifndef lib lib
	set_ifndef include include
	set_ifndef oldinclude usr/include 
	set_ifndef info info
	set_ifndef man man

	eval_later {

		set_ifndef exec_prefix $prefix 
		set_ifndef bindir [file join $exec_prefix $bin]
		set_ifndef sbindir [file join $exec_prefix $sbin]
		set_ifndef libexecdir [file join $exec_prefix $libexec]
		set_ifndef includedir [file join $prefix $include]
		set_ifndef pkgincludedir [file join $includedir $::PACKAGE]
		set_ifndef libdir [file join $prefix $lib]
		set_ifndef pkglibdir [file join $libdir $::PACKAGE]
		set_ifndef datadir [file join $prefix $data]
		set_ifndef sysconfdir [file join $prefix $sysconf]
		set_ifndef sharedstatedir [file join $prefix $sharedstate]
		set_ifndef localstatedir [file join $prefix $localstate]
		set_ifndef mandir [file join $prefix $man]

		set_ifndef FILES [dict create]
		set_ifndef DISTFILES {}

		set_ifndef PROGRAMS [list]

		set_ifndef DATA [list]
		set_ifndef PKGDATA [list]

		set_ifndef HEADERS [list]

		set_ifndef LIBRARIES [list]
		set_ifndef MANS {}
		set_ifndef target $PACKAGE-$VERSION
		set_ifndef tindent {        }
		set_ifndef BUILDFILES [list {*}$PROGRAMS {*}[libnames $LIBRARIES]]
		target distdir $DISTFILES {
			set files [list]
			foreach p $SRC {
				if [file isfile $p]  {
					lappend files $p
				} else {
					if [string length $srcdir ] {
						set p [file join $srcdir $p]
						if [file isfile $p] {
							lappend files $p
						}
					}
				}
			}
			if [llength $files] {
				set err_help2man [list]
				foreach file $files {
					if [regexp 'ab help2man is required to generate this page' $file] {
						lappend err_help2man $file
					}
				}
				if [llength $err_help2man] {
					puts stderr "error: found man pages containing the replacement text,
					\"missing help2man\":"
					foreach file $err_hlep2man {
						puts stderr "${tindent}$files"
					}
					puts stderr "${tindent}To fix them, install help2man, remove and
					regenerate the man pages."
					puts stderr \
						"${tindent}typically \"make maintainer-clean\" will remove them"
					exit 1
				}
			}
			#TODO: finish this (next line isn't even a complete command)
			::am::removedir 
		}

		target test $BUILDFILES {} 
		target check test {} 

		target install-Programs $PROGRAMS {
			if [llength $PROGRAMS] {
				mkinstdir $bindir
			}
			foreach program $PROGRAMS {
				echocmd ::fileutil::install -m 00555 [archfile $program] \
					[file join $bindir [file tail $program]] 
			}
		}

		target install-data $DATA {
			if {[llength $DATA]} {
				mkinstdir $datadir
			}
			set offset [string length $PROJDIR]
			incr offset
			foreach fname $DATA {
				walk $fname [list ::am::install_data $datadir $offset]
			}
			foreach fname $PKGDATA {
				walk $fname [list ::am::install_data \
					[file join $datadir $::PACKAGE] $offset]
			}
		}

		target install-libraries [libnames $LIBRARIES] {
			if {[llength $HEADERS]} {
				mkinstdir $includedir
			}
			foreach header $HEADERS {
				set atts [lassign $header header]
				set dest $includedir
				if {[getdefault $atts $::am::dest_s {}] eq $::am::pkgdir_s} {
					set dest $pkgincludedir
				}
				if {[getdefault $atts $::am::tail_s 1]} {
					set destname [file tail $header]
				} else {
					set destname $header
				}
				mkinstdir $dest
				echocmd ::fileutil::install -m 00444 [archfile $header] \
					[file join $dest $destname] 
			}

			foreach library $LIBRARIES {
				set atts [lassign $library library]
				set dest $libdir
				switch [getdefault $atts $::am::dest_s {}] \
					$::am::pkgdir_s {
						set dest $pkglibdir
					}
				mkinstdir $dest
				if {[getdefault $atts $::am::tail_s 1]} {
					set destname [file tail $library]
				} else {
					set destname $library
				}
				echocmd ::fileutil::install -m 00555 [archfile $library] \
					[file join $dest $destname] 
			}
		}

		target install [list {*}$BUILDFILES install-Programs \
			install-libraries install-data] {

			puts "finished installing $target"
		}
	}
}
