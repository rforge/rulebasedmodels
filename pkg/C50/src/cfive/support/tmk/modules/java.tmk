# -*-Mode: tcl -*-
#
# $Id: java.tmk,v 1.2 2005/09/08 21:01:25 yamauchih Exp $
#
# java.tmk 
#	Copyright (C) 2000-2005 YAMAUCHI Hitoshi
#
# Usage:
#   You can set some variables in your TMakefile or TMakefile.proj
#
#    ::java::JAVA_COMPILER   "your java compiler"
# 	under Sun, Linux, Windows: you can find fastjavac in 
#	forte4j/fastjavac/fastjavac 
# 	When you use fastjavac, you shoud append jdk path like this.
# 	    append ::java::JAVAC_OPTION "-jdk /usr/local/jdk1.2"
#
#    ::java::JAVAC_OPTION    "javacc option"
#    ::java::PACKAGEROOTDIR  "your package root directory"
#    ::java::JAVAC_CLASSPATH "classpath"
#	(environment variable CLASSPATH is also available)
#
# =============================================================================
# $Id: java.tmk,v 1.2 2005/09/08 21:01:25 yamauchih Exp $
# =============================================================================

namespace eval java { }
#
# commands: compiler, javadoc
#
set_ifndef ::java::JAVAC   [exec which javac]
set_ifndef ::java::JAVADOC [exec which javadoc]
set_ifndef ::java::JAVAC_CLASSPATH ""

#
# suppress mkdirs
#
set ::USE_ARCH 0

#
# options
#
set_ifndef ::java::EXCLUDE {}
set_ifndef ::java::JAVADOC_DIR    "doc"
set_ifndef ::java::JAVADOC_OPTION " -d ${::java::JAVADOC_DIR} "

#
# JAVAC option 
#
set_ifndef ::java::JAVAC_OPTION "-deprecation -source 1.4 "
switch $CODELEVEL {
    "prf"   { lappend ::java::JAVAC_OPTION "-g" }
    "dbg"   { lappend ::java::JAVAC_OPTION "-g" }
    "std"   { lappend ::java::JAVAC_OPTION "-g" }
    "opt"   { lappend ::java::JAVAC_OPTION "-O" }
    "max"   { lappend ::java::JAVAC_OPTION "-O" }
    default { }
}

#
# JAVA CLASSPATH
#
if { [ info exists env(CLASSPATH) ] == 1 } { 
    if { [ info exists ::java::JAVAC_CLASSPATH ] } {
	append ::java::JAVAC_CLASSPATH ":$env(CLASSPATH)"
    } else {
	set ::java::JAVAC_CLASSPATH "$env(CLASSPATH)"
    }
}

# if ::java::PACKAGEROOTDIR defined.
if { [ info exists ::java::PACKAGEROOTDIR ] } {
    append ::java::JAVAC_CLASSPATH ":${::java::PACKAGEROOTDIR}"

    set ::java::dirdepthstr "${::java::PACKAGEROOTDIR}"
    #
    # if $dirdepthstr ends with /, delete it.
    #
    if { [regexp ".*/$" ${::java::dirdepthstr} ] } {
	set len [expr [string length ${::java::dirdepthstr}] - 2]
	set ::java::dirdepthstr [string range ${::java::dirdepthstr} 0 ${len}]
    }
    set ::java::subdirdepth [llength [ split ${SUBDIR} "/" ]]
    for { set i 1 } { ${i} < ${::java::subdirdepth} } { incr i 1 } {
	append ::java::dirdepthstr "/.."
    }
    append ::java::JAVAC_CLASSPATH ":${::java::dirdepthstr}"
}


#
# T-expression : .java -> .class
# eval_later for EXCLUDE (after read TMakefile)
#
eval_later {
    if { ${::java::JAVAC_CLASSPATH} == "" } {
	target *.class {${ROOT}.java} {
	    eval cmd ${::java::JAVAC} ${::java::JAVAC_OPTION} ${SRC}
	}
    } else {
	target *.class {${ROOT}.java} {
	    eval cmd ${::java::JAVAC} ${::java::JAVAC_OPTION} \
		-classpath ${::java::JAVAC_CLASSPATH} ${SRC}
	}
    }

    set JAVA_SRCS [glob -nocomplain *.java]
    set BUILD_JAVASRCS [lminus ${JAVA_SRCS} $EXCLUDE]
    foreach javafile ${BUILD_JAVASRCS} {
 	set classfile "[file rootname ${javafile}].class"
 	build ${classfile}
    }
}


#
# clean
#
target clean ALWAYS_BUILD {
    puts "delete *.class *~"
    foreach f [glob -nocomplain *.class *~] {
	file delete -- $f
    }
}

#
# java doc : eval_later for EXCLUDE (after read TMakefile)
#
eval_later { 
    target doc ALWAYS_BUILD {
	set JAVA_SRCS [glob -nocomplain *.java]
	set BUILD_JAVASRCS [lminus ${JAVA_SRCS} $EXCLUDE]
	foreach javafile ${BUILD_JAVASRCS} {
	    eval cmd [list ${::java::JAVADOC}] ${::java::JAVADOC_OPTION} [list ${javafile}]
	}
    }
}


#
# clean javadoc files html
#
target docclean ALWAYS_BUILD {
    puts "file delete -force -- ${::java::JAVADOC_DIR}"
    file delete -force -- ${::java::JAVADOC_DIR}
}
