# =========================================================================
# tmk: module_config.tmk
#
# Copyright (C) 1999-2005  Hartmut Schirmacher, Stefan Brabec
#                          Wolfgang Heidrich,   Hitoshi Yamauchi
#                          Hendrik Lensch
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# =========================================================================
# $Id: module_config.tmk,v 1.10 2005/04/23 20:53:58 yamauchih Exp $
# routines for declaring and caching module config vars+procs
# =========================================================================
# $Log: module_config.tmk,v $
# Revision 1.10  2005/04/23 20:53:58  yamauchih
# add runmode to build 64bit executables
#
# Revision 1.9  2004/09/15 05:53:47  wheidrich
# Replace space with underscore in full name generation for config cache files.
# Spaces caused problems for Macs (whose platform is "Power Macintosh")
#
# Revision 1.8  2002/11/18 11:06:56  brabec
# *** empty log message ***
#
# Revision 1.7  2001/04/24 10:24:29  brabec
# cygwin/vc port
#
# Revision 1.6  2001/01/14 15:47:37  htschirm
# changes during Hartmut's stay at Phil's lab
#
# Revision 1.5  2000/09/28 07:25:12  htschirm
# fixed dot-in-varname bug
#
# Revision 1.4  2000/08/07 09:07:12  htschirm
# create empty namespace for each module
#
# Revision 1.3  2000/08/01 16:10:02  htschirm
# directory variable names
#
# Revision 1.2  2000/08/01 12:19:25  htschirm
# towards 0.9beta
#
# Revision 1.1  2000/07/20 16:15:59  htschirm
# towards tmk release 0.9
#
# =========================================================================

# config cache command dispatcher
proc ::config {cmd args} {
    set procname ::tmk::config_$cmd
    if {[llength [info commands $procname]] == 0} {
	exit_msg "unknown config cache command: $cmd"
    }
    return [uplevel 1 $procname $args]
}
# filename for the cache
proc ::tmk::config_name {} {
    global ::CPU ::VENDOR ::OS ::OSVER ::HOST ::DOMAIN
    global ::DIST ::DISTVER ::__RunModeStatList
    set distName {}
    if {[info exists ::DIST] && [info exists ::DISTVER]} {
	set distName ${DIST}-${DISTVER}-
    }
    set addr [::tmk::get_runmodestat addressmode]
    set gccn [::tmk::get_runmodestat gccexename]

    return [string tolower \
	config-$distName${CPU}-${VENDOR}-${OS}-${OSVER}-${HOST}-${DOMAIN}-${addr}-${gccn}]
}
# directory in which cache file is stored
proc ::tmk::config_dir {} {
    global ::tmk::dir_priv ::tmk::dir
    global ::__IsWindowsSystem ::__UseRegistry
    global ::__HKeyUser
    # use registry ? (windows only) 
    if $::__UseRegistry {
 	return $__HKeyUser
    } else {
	return [file join ${::tmk::dir_priv} cache]
    }
}    
# path + name
proc ::tmk::config_fullname {} {
    set tmp [file join [config dir] [regsub -all { } [config name] _]]
    return $tmp
}
# get the modification time of the cache file/registry stuff
proc ::tmk::config_mtime {} {
    global ::__UseRegistry
    set cachetime 0
    if $::__UseRegistry {
	catch {set cachetime [registry get [config dir]\\[config name] timestamp]}
    } else {
	catch {set cachetime [file mtime [config fullname]]}
    }
    return $cachetime
}
# do we have an existing cache file?
proc ::tmk::config_exists {} {
    global ::__UseRegistry
    set exists 0
    if $::__UseRegistry {
        catch {
	    set ts [registry get [config dir]\\[config name] timestamp]
	    set exists [llength $ts]
	} 
    } else {
	set exists [file exists [config fullname]]
    }
    return $exists
}

# read config cache, or return 0 if not existant / outdated
# this is done by comparing the cache file with a global
#   file ${::tmk::ConfigDir}/rebuildCache
proc ::tmk::config_read {} {
    global ::__ForceReconfig ::tmk::dir_config
    global ::__UseRegistry

    # rebuild ?
    set configcache [config fullname]
    if $::__ForceReconfig {
	# got already a configurations ? -> delete it !
	config delete
	return 0
    }

    # config cache file?
    if [config exists] {
	# if "rebuildCache" is newer, the cache is considered outdated
	set configRebuildFile [file join ${::tmk::dir_config} rebuild_cache]
	if [file exists $configRebuildFile] {
	    if {[file mtime $configRebuildFile] > [config mtime]} {
		config delete
		return 0
	    }
	}
    } else {
	return 0
    }

    # read and evaluate contents of file in global namespace and eval level
    if $::__UseRegistry {
	dbg_msg "reading cached configuration from [config fullname]"

	# set binary_vars [registry get [config dir] [config name]]

	set vars {}
	set vals [registry values [config dir]\\[config name] \[0123456789\]*]
	foreach i $vals {
	    append vars [registry get [config dir]\\[config name] $i]
	}

	namespace eval :: [list uplevel \#0 [list eval $vars]]
    } else {
	dbg_msg "reading cached configuration from $configcache"
	namespace eval :: [list uplevel \#0 [list source $configcache]]
    }
    return 1
}
# register and define a variable
proc ::tmk::config_set {name value} {
    set ns  [namespace qualifiers $name]
    set var [namespace tail $name]
    if {$ns eq {}} {
	if {[string range $name 0 1] eq "::"} {
	    set ns ::
	} else {
	    set ns [uplevel 1 namespace current]
	}
    }
    
    # array variable? special treatment!
    if {[string first ( $var] != -1} {
	if {![regexp {(.*)\((.*)\)} $var dummy var elem]} {
	    exit_msg "variable name syntax error: $name"
	}
	dbg_msg "caching var ($ns,${var}(${elem}))"
	
    } else {
	set elem {}
	dbg_msg "caching var ($ns,$var)"
    }

    # if it doesn't exist yet, create __CACHED_VARS in that namespace
    if {[uplevel 1 [list info vars ${ns}::__CACHED_VARS]] eq {}} {
	uplevel 1 [list namespace eval $ns [list variable __CACHED_VARS {}]]
    }
    # don't register variable twice
    if {![uplevel 1 lcontains \$\{${ns}::__CACHED_VARS\} $var]} {
	uplevel 1 [list namespace eval $ns [list lappend __CACHED_VARS $var]]
    }
    # atually set the value
    if {$elem eq {}} {
	uplevel 1 [list namespace eval $ns [list variable $var $value]]
    } else {
	uplevel 1 [list namespace eval $ns [list variable $var]]
	uplevel 1 [list namespace eval $ns [list set ${var}(${elem}) $value]]
    }
    return $value
}
# create a new variable if it does not exist already
proc ::tmk::config_variable {name args} {
    
    if {([uplevel 1 config vars $name] eq {}) || \
         ($args ne {})} {
	uplevel 1 [list config set $name $args]
    } 

}
# register a variable that's going to be evaluated later
proc ::tmk::config_set_lazy {name expr {msg_only 0}} {

    set ns       [uplevel 1 tmk::full_namespace $name]
    set var      [namespace tail $name]
    
    # array variable? special treatment!
    if {[string first ( $var] != -1} {
	exit_msg "cannot lazy-eval array variables. sorry."
    }

    # register, store lazy expression, and then lazy-set value
    if {[info vars ${ns}::__CACHED_LAZY] eq {}} {
	namespace eval $ns [list variable __CACHED_LAZY {}]
    }
    if {![lcontains \$\{${ns}::__CACHED_LAZY\} $var]} {
	namespace eval $ns [list lappend __CACHED_LAZY [list $var msg_only]]
    }
    # this only stores the lazy expression for the cache lateron
    namespace eval $ns [list variable ${var} $expr]
    # this will expand the lazy var lateron if desired within the config
    set_lazy ${ns}::$var $expr $msg_only
}

# register and define a proc 
proc ::tmk::config_proc {name arguments body} {
    set ns  [namespace qualifiers $name]
    set var [namespace tail $name]
    if {$ns eq {}} {
	if {[string range $name 0 1] eq "::"} {
	    set ns ::
	} else {
	    set ns [uplevel 1 namespace current]
	}
    }
    dbg_msg "caching proc ($ns,$var)"
    # if it doesn't exist yet, create __CACHED_VARS in that namespace
    if {[uplevel 1 info vars ${ns}::__CACHED_PROCS] eq {}} {
	uplevel 1 [list namespace eval $ns [list variable __CACHED_PROCS {}]]
    }
    # don't register variable twice
    if {![uplevel 1 lcontains \$\{${ns}::__CACHED_PROCS\} $var]} {
	uplevel 1 [list namespace eval $ns [list lappend __CACHED_PROCS $var]]
    }
    # actually define the procedure
    uplevel 1 [list namespace eval $ns [list proc $var $arguments $body]]
}
# register and define a variable, if it's not defined already
proc ::tmk::config_setifndef {name value} {
    if {[uplevel 1 info vars $name] eq {}} {
	uplevel 1 [list ::tmk::config_set $name $value]
    }
}
# return list of cached variable names that match the pattern
proc ::tmk::config_vars {pattern {ns {}}} {

    set vars {}
    ifdef ${ns}::__CACHED_VARS {
	set vars [set ${ns}::__CACHED_VARS]
	set vars [lmap $vars {${ns}::$ITEM}]
	set vars [lunify [lfilter $vars {[string match $pattern $ITEM]}]]
    }
    if {$ns eq {}} {set ns ::}
    set children [namespace children $ns]
    foreach c $children {
	lappend vars {*}[config_vars $pattern $c]
    }
    return $vars
}
# return list of cached procedure names that match the pattern
proc ::tmk::config_procs {pattern {ns {}}} {

    set vars {}
    ifdef ${ns}::__CACHED_PROCS {
	eval set vars \$\{${ns}::__CACHED_PROCS\}
	set vars [lmap $vars {${ns}::$ITEM}]
	set vars [lunify [lfilter $vars {[string match $pattern $ITEM]}]]
    }
    if {$ns eq {}} {set ns ::}
    set children [namespace children $ns]
    foreach c $children {
	lappend vars {*}[config_procs $pattern $c]
    }
    return $vars
}

# return all cached config definitions in the form of a Tcl/tmk script
proc ::tmk::config_dump {{ns ::}} {
    return [dump_namespace $ns 0 1]
}
# delete all cache entries (e.g. when doing a re-config)
proc ::tmk::config_delete {} {
    global ::__UseRegistry
    set res 0
    if [config exists] {
	if $::__UseRegistry {
	    catch {registry delete [config dir]\\[config name]; set res 1}
	} else {
	    catch {file delete [config fullname]; set res 1}
	}
	if {!$res} {
	    exit_msg "cannot delete cache"
	}
    }
}
# create a new cache directory (or registry entry)
proc ::tmk::config_create_dir {} {
    global ::__UseRegistry ::__IsCygwinSystem
    if [config exists] {
	config delete 
    }
    set confdir [config dir]
    if $::__UseRegistry {
	if [catch [registry set [config dir]\\[config name] timestamp [clock seconds] sz] msg] {
	    exit_msg "cannot create registry entry [config dir]\\[config name]:\n  $msg"
	}
    } else {
	if {![file isdirectory $confdir]} {
            set res [catch [file mkdir $confdir] msg]
            
	    if $res {
		exit_msg "cannot create cache dir $confdir:\n  $msg"
	    }
	}
    }
}

# save all vars and procs in config cache namespace
proc ::tmk::config_save {} {
    global ::__UseRegistry

    config delete 
    config create_dir

    # a) dump all module namespace contents
    set cache_contents [config_dump]

    # b) create empty namspace for every module / module/compiler combination
    set mods .
    if [info exists ::env(TMK_MODULE_PATH)] {
	eval lappend mods [split $::env(TMK_MODULE_PATH) :]
    }
    lappend mods $::tmk::dir/modules
    set mods [eval glob -nocomplain [lmap $mods {$ITEM/*.tmk}]]
    set mods [lmap $mods {$IBASE}]
    dbg_msg "creating namespaces for:\n  \[$mods\]"
    append cache_contents "\n# make sure all module namespaces exist\n"
    foreach mod $mods {
	append cache_contents "namespace eval $mod {}\n"
	if {[info vars ::${mod}::COMPILERS] != {}} {
	    eval set comps \$\{::${mod}::COMPILERS\}
	    dbg_msg "creating namespaces for \[[lmap $comps {${mod}::$ITEM}]\]"
	    foreach c $comps {
		append cache_contents "namespace eval ${mod}::$c {}\n"
	    }
	}
    }


    # write cache contents to registry or file
    if $::__UseRegistry {
	set tmp_dump [config_dump] 
        set tmp_dump_len [string length $tmp_dump]
        registry set [config dir]\\[config name]
	set counter 1
	for {set i 0} {$i < $tmp_dump_len} {set i [expr $i + 8192]} {
	    registry set [config dir]\\[config name] $counter \
		[string range $tmp_dump $i [expr $i + 8191]]
	    incr counter
	}
		
    } else {
	set fullname [config fullname]
	write_file $fullname cache_contents
	#if [catch "write_file $fullname cache_contents" msg] {
	#    exit_msg "cannot create config ${fullname}:\n  $msg"
	#} 
    }
}

# dump all cached variables + procedure definitions of the given namespace
#   the resulting Tcl script will define everything in namespace ns instead
#   of fullns
# e.g. this is what will be saved in the config cache file
proc ::tmk::dump_namespace {{ns {::}} {depth 0} {config 0}} {

    # only dump config vars, or all?
    if $config {
	set getvars {\[lmap \$\{${ns}::__CACHED_VARS\} \{${ns}::\$ITEM\}\]}
	set getlazy {\[lmap \$\{${ns}::__CACHED_LAZY\} \{${ns}::\$ITEM\}\]}
	set getprocs {\[lmap \$\{${ns}::__CACHED_PROCS\} \{${ns}::\$ITEM\}\]}
    } else {
	set getvars {{[info vars ${ns}::*]}}
	set getlazy {}
	set getprocs {{[info procs ${ns}::*]}}
    }
    
    set s [blanks $depth]

    # 1) create namespace
    if {$depth == 0} {
	set r "${s}namespace eval $ns \{\n"
    } else {
	set r "${s}namespace eval [namespace tail $ns] \{\n"
    }
    incr depth 2
    set ss [blanks $depth]

    # 2) dump variables
    set vars {}
    catch {eval eval set vars $getvars}
    foreach v $vars {
	set vname [namespace tail $v]
	if [namespace eval $ns array exists $vname] {
	    # array variable
	    append r "${ss}variable $vname\n"
	    foreach x [array names $v] {
		eval set vv \$$v\($x\)
		append r "${ss}set [list ${vname}($x) $vv]\n"
	    }
	} else {
	    # scalar variable
	    eval set vv \$\{$v\}
	    append r "${ss}variable [list $vname $vv]\n"
	}
    }

    # 3) dump lazy variables
    set vars {}
    catch {eval eval set vars $getlazy}
    foreach v $vars {
	if {[llength $v] == 2} {
	    set v [lindex $v 0]
	    set msg_only " 1"
	} else {
	    set msg_only {}
	}
	set vname [namespace tail $v]
	foreach cmd [trace vinfo $v] {
	    set op [lindex $cmd 0]
	    if {$op eq "r"} {trace vdelete $v $op [lindex $cmd 1]}
	}
	eval set vv \$\{$v\}
	append r "${ss}set_lazy [list $vname $vv]${msg_only}\n"
    }

    # 4) dump procedures
    set procs {}
    catch {eval eval set procs $getprocs}
    foreach p $procs {
	set args [info args $p]
	set body [info body $p] 
	append r "${ss}proc [list [namespace tail $p] $args $body]\n"
    }

    # 5) recursive calls for children namespaces
    if {$ns eq {}} {set ns ::}
    set children [namespace children $ns]
    if [llength $children] {
	append r \n
	foreach c $children {
	    append r [dump_namespace $c $depth $config]
	}
    }

    # 6) close namespace
    if {$s != $ss} {
	append r "${s}\}\n"
    }
    return $r
}



