#!/bin/sh
# -*-Mode: tcl -*-
#\
exec ${TMK_TCLSH:=tclsh} "$0" "$@"

# =================================================
# convert from tmk pre-release to release 0.9 names
# =================================================


proc backup {file} {
    set bckp $file.old
    if [file exists $bckp] {
	puts stderr "$bckp already exists."
	return 0
    }
    file copy -force -- $file $bckp
    return 1
}

proc replace {flags find txt repl destvar} {
    upvar $destvar dest

    set r [regsub $flags $find $txt $repl dest] 
    if $r {
	puts -nonewline "r"
	flush stdout
    }
    return $r
}

proc convert {file} {

    # when one of these expressions is found, replace the whole line by ...
    set replace_expr {
	{{[^:]LINK_MODE} {}}
	{{set[ \t]+LINK_LIB_TWICE[ \t]+.1} {lappend ::link::OPTIONS circular}}
	{{set[ \t]+LINK_LIB_TWICE[ \t]+.0} {lremove ::link::OPTIONS circular}}
	{{^(.*)QTPATTERNS(.*)$} {#\1qt::PATTERNS\2}}
    }

    # when one of these expressions is found, comment-out the whole line
    set comment_out_expr {
	{set[ \t]+PROGRAMS[ \t]+}
	{append[ \t]+PROGRAMS[ \t]+}
	{LINK_LIB_TWICE}
	{LINK_LIB_INTO_LIB}
    }

    puts -nonewline stdout "converting $file\n  "
    flush stdout

    set txt [exec cat $file]

    # replace certain names
    replace -all {([^:])PROJLIBS} $txt {\1link::PROJLIBS} txt
    replace -all {([^:])SYSLIBS} $txt {\1link::SYSLIBS} txt
    replace -all {([^:])LIBPATH} $txt {\1link::LIBPATH} txt
    replace -all {([^:])LDFLAGS} $txt {\1link::FLAGS} txt
    replace -all {([^:])CCFLAGS} $txt {\1cxx::FLAGS}  txt
    replace -all {([^:])CFLAGS}  $txt {\1c::FLAGS}    txt
    replace -all {\$COMPILER} $txt {$cxx::COMPILER} txt
    replace -all {MIPSpro}    $txt {mipspro}         txt
    replace -all {MAKE_STATIC_LIB} $txt {link::MAKE_LIB} txt
    replace -all {MAKE_SHARED_LIB} $txt {link::MAKE_SHLIB} txt
    replace -all {MAKE_PROGRAMS}   $txt {link::MAKE_EXE} txt
    replace -all {([^:])LINK_MODE} $txt {\1link::LINK_MODE} txt
    replace -all {([^:])setLibCodeLevel} $txt {\1link::set_lib_codelevel} txt
    replace -all {([^:])setLibCodeLevel} $txt {\1link::set_lib_codelevel} txt

    # if cxx and c are used together, cxx should be first!
    replace -all {module(.*[\{ ])c(.*) cxx} $txt {module \1cxx\2 c} txt

    replace -all {NEWCLASS_TEMPLATE} $txt {newclass::TEMPLATE_FILES} txt
    replace -all {([^:])CLASSNAME} $txt {\1newclass::CLASSNAME} txt
    replace -all {([^:])TEMPLATE_ARGS} $txt {\1newclass::TEMPLATE_ARGS} txt
    replace -all {([^:])TEMPLATE_TYPE} $txt {\1newclass::TEMPLATE_TYPE} txt
    replace -all {([^:])TEMPLATE_NAMES} $txt {\1newclass::TEMPLATE_NAMES} txt
    replace -all {([^:])TEMPLATE_DEF} $txt {\1newclass::TEMPLATE_DEF} txt
    replace -all {([^:])DESCRIPTION} $txt {\1newclass::DESCRIPTION} txt

    replace -all {([^:])QTDIR} $txt {\1qt::DIR} txt
    replace -all {([^:])QTMOC} $txt {\1qt::MOC} txt
    replace -all {([^:])MOCFLAGS} $txt {\1qt::MOCFLAGS} txt

    replace -all {DIST_TARGETS} $txt {dist::TARGETS} txt
    replace -all {DIST_LIB} $txt {dist::LIBDIR} txt
    replace -all {DIST_BIN} $txt {dist::BINDIR} txt
    replace -all {DIST_RENAME} $txt {dist::RENAME_EXE} txt
    replace -all {DIST_SCRIPT} $txt {dist::SCRIPT} txt
    replace -all {DIST_LDD} $txt {dist::LDD} txt
    replace -all {dist_script} $txt {lappend dist::SCRIPT} txt
    replace -all {dist_copy} $txt {::copy_files} txt

    replace -all {Link2DFilters} $txt {link_2d_filters} txt

    # replace / comment-out whole lines
    set txt [split $txt "\n"]
    set new {}
    foreach line $txt {

	set next_line 0
	
	# is the line a comment? then just go on
	if {[string index [string trimleft $line] 0] == "#"} {
	    lappend new $line
	    continue
	}

	# replace line?
	foreach exp $replace_expr {
	    set search [lindex $exp 0]
	    set repl   [lindex $exp 1]
	    if [regsub $search $line $repl line] {
		puts -nonewline "l"
		flush stdout
		lappend new $line
		set next_line 1 ; break }
	}
	if $next_line {continue}
	
	# comment-out line?
	foreach exp $comment_out_expr {
	    if [regexp $exp $line] {
		puts -nonewline "c"
		flush stdout
		lappend new "# $line"
		set next_line 1 ; break 
	    }
	}
	if $next_line {continue}

	# keep the line as it is
	lappend new $line

    }

    # re-assemble lines and write to file
    set txt [join $new "\n"]
    set f [open $file w]
    puts $f $txt
    close $f

    puts ""

}

foreach file $argv {
    if [backup $file] {convert $file}
}


