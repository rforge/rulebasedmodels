# =========================================================================
# Copyright (C) 1999,2000  Hartmut Schirmacher, Stefan Brabec
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# =========================================================================
# $Id: module_threads.tmk,v 1.8 2005/12/17 17:18:42 yamauchih Exp $
# routines for multithreading
# =========================================================================


set ::__UseThreads 0
set ::__MaxThreads 1
set ::__RunningThreads {}


# check for thread support (either with -par or TMK_THREADS)
if {$__ParProcesses > 0} {
    catch {set ::__UseThreads [package require Thread]}
    if {$::__UseThreads != 0} {
	set ::__MaxThreads $__ParProcesses
    } 
} else {
    if [info exists env(TMK_THREADS)] {
	if {$env(TMK_THREADS) > 0} {
	    catch {set ::__UseThreads [package require Thread]}
	    if {$::__UseThreads != 0} {
		set ::__MaxThreads $env(TMK_THREADS)
		set ::__UseThreads 1
	    } 
	}
    }
}


proc ::tmk::add_thread_checkpoint {target src} {
    puts "requested checkpoint for $target $src"
    set allCheckpoints {}
    foreach s $src {
	if [info exists ::__Threads($s)] {
	    lappend allCheckpoints $s
	}
    }
    set ::__Checkpoints($target) $allCheckpoints
}


proc ::tmk::thread_error_proc {id errorinfo} {
    exit_msg "\[$id\] $errorinfo"
}

proc ::tmk::job_done_msg {th_name th res} {
    if {$res == 0} {
	log_msg "sucessfully completed job $th_name \[$th\]"
    } else {
	log_msg "job $th_name failed \[$th\]"
    }
}

proc ::tmk::join_thread_name {th_name} {
    global ::__Threads
    global ::__RunningThreads
    global ::__RetValThreads
    set res 0
    if [info exists ::__Threads($th_name)] {
	set th $::__Threads($th_name)
	if [info exists ::__RetValThreads($th_name)] {
	    set res $::__RetValThreads($th_name)
	} else {
	    set res [thread::join $th]
	    lremove ::__RunningThreads $th_name
	    set ::__RetValThreads($th_name) $res
	    ::tmk::job_done_msg $th_name $th $res
	}
#	unset ::__Threads($th_name)
    }

    return $res
}


proc ::tmk::wait_for_threads_name {th_names} {
    global ::__RunningThreads
    global ::__ThreadsRemove
    set one_failed 0
    foreach th_name $th_names {
	if [::tmk::join_thread_name [file tail $th_name]] {
	    set one_failed 1
	}
    }
    return $one_failed
}


# echo and execute a command, 
# and cleanly exit with an error message if needed 
proc ::tmk::cmd_thread {th_name args} {
    global ::__RunningThreads
    global ::__Threads
    global ::__Checkpoints
    uplevel 0 thread::errorproc ::tmk::thread_error_proc

    check_max_thread

    puts $args 

    set th [thread::create -joinable "exec $args >@stdout 2>@stderr </dev/null"]
    set th_name [file tail $th_name]
    lappend ::__RunningThreads $th_name
    set     ::__Threads($th_name) $th
    log_msg "running job $th_name \[$th\]"
    return $th
}

proc ::tmk::script_thread {th_name script {flag {}}} {
    global ::__RunningThreads
    global ::__Threads
    uplevel 0 thread::errorproc ::tmk::thread_error_proc

    puts $script
    check_max_thread
    set th [thread::create -joinable $script]
    set th_name [file tail $th_name]
    if {[lsearch "final" $flag] == 0} {
	lappend ::__RunningThreads $th_name
    }
    set     ::__Threads($th_name) $th
    log_msg "running job $th_name \[$th\]"
    return $th
}


proc ::tmk::job_name {th} {
    global ::__Threads
    foreach i [array names ::__Threads] {
	if {$::__Threads($i)  == $th} {
	    return $i
	}
    }
    exit_msg "no such job $th !"
}
		      

proc ::tmk::check_max_thread {} {
    global ::__RunningThreads
    global ::__MaxThreads
    global ::__RetValThreads
    global ::__Threads

    foreach th_name $::__RunningThreads {
	set t $::__Threads($th_name)
	if {[thread::exists $t] == 0} {
	    lremove ::__RunningThreads $th_name
	    if {[info exists ::__RetValThreads($th_name)] == 0} {
		set     ::__RetValThreads($th_name) [thread::join $t]
		::tmk::job_done_msg "$th_name" $t $::__RetValThreads($th_name)
	    }
	}
    }

    if {[llength $::__RunningThreads] < $::__MaxThreads} {
	return
    }

    set th_name [lindex $::__RunningThreads 0]
    set th $__Threads($th_name)
    set ::__RetValThreads($th_name) [thread::join $th]
    ::tmk::job_done_msg "$th_name" $th $::__RetValThreads($th_name)
    lremove ::__RunningThreads $th_name
    return
}
