# $Id: icc.tmk,v 1.7 2008/04/21 12:04:09 cfuchs_sf Exp $
# configure for Intels C/C++ for linux

# TODO 
# ----
# -ipo is currently buggy (not used)

# try to find executables, so we don't need this in the site config
set EXECUTABLE icc
catch { config set EXECUTABLE [exec which icc] }

# we need 'ar' for linking static libs...
catch {config set AR [exec which ar]}

set out_ver "Version 5.0" 
catch { set out_ver [exec {*}$EXECUTABLE -V -help 2>@stdout] }
if [regexp {Version ([0-9])+\.[0-9]+} $out_ver a b ] {
    config set VERSION [string trim $b]
}


config set FLAGS_PRF {}
config set FLAGS_DBG -g
config set FLAGS_STD {}
config set FLAGS_OPT {}
config set FLAGS_MAX {}

# what the heck is INCTEMP? - INCTEMP tells header files to include templates
# from .cxx files (a poor-mans template mechanism)
if {$__module eq "cxx"} {
    foreach x {FLAGS_PRF FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
#	append $x " -Kc++eh -Krtti -Tnoauto -Kc++ -D_INCTEMP"
	lappend x -Kc++eh -Krtti -fPIC -Kc++ -D_INCTEMP
    }
} 

# general options for c and c++
foreach x {FLAGS_PRF FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
    lappend x -restrict
}


#switch $CPU {
#    pentium4 {lappend FLAGS_MAX -xWKiM -tpp6}
#    pentium3 {lappend FLAGS_MAX -xKiM -tpp6}
#    pentium2 {lappend FLAGS_MAX -xiM -tpp6}
#    pentium  {lappend FLAGS_MAX -xM -tpp5}
#    athlon   {lappend FLAGS_MAX -xiM -tpp6}
#    ix86     {}
#}

lappend FLAGS_MAX -O3 -vec_report1

if [expr $VERSION > 5] {
    lappend FLAGS_MAX -ipo -ipo_obj
    config set LDFLAGS_MAX [list -ipo -i_dynamic]
} else {
    lappend FLAGS_MAX -ip
    config set LDFLAGS_MAX [list -ip -i_dynamic]
}


# default flags if this compiler is used as the linker 
config set LDFLAGS_PRF -i_dynamic
config set LDFLAGS_DBG -i_dynamic
config set LDFLAGS_STD -i_dynamic
config set LDFLAGS_OPT -i_dynamic



# flags for some of the meta compiler options
config set METAOPT(nowarn)   -w
config set METAOPT(warn)     {}
config set METAOPT(fullwarn) -w2
config set METAOPT(ansi)     -ansi
config set METAOPT(stl)      {}
config set METAOPT(shared)   -KPIC ;# ??? really ???

# with gcc we don't need an external makedepend
config set EXPLICIT_MAKEDEPEND 0

# return desired meta compiler options 
config proc meta_option_flags {opt} {
    variable METAOPT 
    set result {}
    foreach o $opt {
	if [info exists METAOPT($o)] {
	    dbg_msg "meta option $o: flags $METAOPT($o)" 2
		#todo: should this be {*}$METAOPT($o)?
		lappend result $METAOPT($o)
	} else {
	    dbg_msg "no flags for meta option $o" 2
	}
    }
    return $result
}

# compile a source file (C or C++) 
config proc compile_obj {obj src dep flags opt} {

    variable EXECUTABLE

    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
    catch { update_dependencies $obj $src $dep $flags $opt }
    set flags [list {*}$flags {*}[meta_option_flags $opt]]
    set cmd [list cmd {*}$EXECUTABLE ]
	lappend cmd {*}$flags
    lappend cmd  -o $obj -c $src
    uplevel \#0 $cmd


}

# only update dependency file, but do not compile
config proc update_dependencies {obj src dep flags opt} {
    variable EXECUTABLE
    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
    if [file exists $dep] {file delete $dep}
    lappend flags {*}[meta_option_flags $opt]
    puts "updating dependencies for $obj"
    set cmd [list cmd_quiet {*}$EXECUTABLE -M]
    lappend cmd -Qoption,cpp,-o$dep
    lappend cmd {*}$flags
    lappend cmd $src
    uplevel \#0 $cmd 
    ### why no -o option? How does gcc know which is the target???
}

# link a static lib
config proc link_lib {lib obj libspec flags opt} {
    variable AR
    # hack: flags are just not passed to AR at all
    lappend flags {*}[meta_option_flags $opt]
#    set libs  [make_lib_options $libspec $opt]
    set cmd [list cmd [file nativename $AR] rf $lib]
    lappend cmd {*}$obj
    uplevel \#0 $cmd
    ### use libspec?
}

# link a shared lib
config proc link_shlib {lib obj export_obj libspec flags opt} {
    variable EXECUTABLE
    if {$export_obj ne {}} {
	log_msg "warning (gcc): no support for interface subset export"
    }
    # needed?
    if [lcontains $opt soname] {
	lappend flags -Qoption,ld,-soname=[file tail $lib]
    }
    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]
    set cmd [list cmd {*}$EXECUTABLE -shared]
    lappend cmd {*}$flags -o $lib {*}$obj {*}$libs]
    uplevel \#0 $cmd
}

# link an executable
config proc link_exe {prog obj libspec flags opt} {

    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]

    variable EXECUTABLE
    lappend cmd {*}$EXECUTABLE {*}$flags
    lappend cmd -o $prog {*}$obj {*}$libs
    uplevel \#0 $cmd 

}

# generate all flags for linking libs with what we are generating.
# recognized options:
# - rpath: store runtime linker paths in lib
# - circular: resolve circular inter-lib symbol dependencies 
# - twice: obsolete, should use "circular"
config proc make_lib_options {libspec opt_expr} {

    set paths {}
    set libs  {}
    
    set rpathflag -Qoption,ld,-rpath,
    
    # ??? muss das echt sein? und was ist mit /usr/local? ???
    # set paths -L/usr/lib $rpathflag/usr/lib
    set paths -L/HPS/opt/pckg/icc/lib $rpathflag/HPS/opt/pckg/icc/lib

    # expand options expression, look for some of the options
    set opt [eval list $opt_expr]
    set circ [expr [lcontains $opt circular] || [lcontains $opt twice]]
    set rpath [lcontains $opt rpath]

    # process pairs (dir shortname)
    foreach lib [::link::libspec projlib_list $libspec] {
	
	set dir  [lindex $lib 0]
	set name [lindex $lib 1]
	if {![file isdirectory $dir]} {
	    exit_msg "directory $dir does not exist."
	}
	lappend paths -L[file nativename $dir]
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
	lappend libs -l[file nativename ${name}]
    }
    
    # lib path + sys libs
    foreach dir [::link::libspec libpath $libspec] {
	lappend paths -L[file nativename $dir] 
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
    }
    foreach lib [::link::libspec syslibs $libspec] {
	lappend libs -l[file nativename $lib]
    }
    
    # resolve circular inter-lib dependencies?
    # well, we can't really do this, so we just put every lib twice
    if {$circ && ([llength $libs] > 1)} {
	return [list {*}$paths {*}$libs {*}$libs]
    } else {
	return [list {*}$paths {*}$libs]
    }
}



# gcc work around
# don't use optimization for a given list of object files
config proc ::gccNoOpt {_files} {
    if {($cxx::COMPILER eq "gcc") &&
	(($::CODELEVEL eq "max") || ($::CODELEVEL eq "opt"))} {
	exception $_files {::cxx::gcc::FLAGS} {
	    set ::cxx::gcc::FLAGS $::cxx::gcc::FLAGS_DBG
	}
    }
}

    
