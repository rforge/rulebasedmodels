#! /bin/env tclsh

# Copyright (C) 2011-2012, Nathan Coulter and others 

#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 2 of the License.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

#reference manual
if 0 {
	data structures

		metalist
		
			a list of lists.  The first item in each sublist is the value.
			Additional items, if any, are interpreted in consecutive pairs as keys
			and values

				example

					[list myfile.txt size 32 dest doc]

	data

		LIBRARIES

			description

				a metalist of filenames

			attributes

				tail

					description

						boolean

					values

						true

							use only the [file tail] of the filename to calculate the
							destination

						false

							the path specified in the filename is appended to the
							destination

				dest

					where in the installation directories to place the file

					values

						bin

						include

						pkginclude

						lib

						pkglib

}

namespace eval :: {
	#different from tmk's cmd because it allows redirection
	proc echocmd {args} {
		puts $args
		return [{*}$args]
	}

	proc isnull {var} {
		return [expr {[string length $var] == 0}]
	}

	proc islink {fname} {
		return [expr {[file type $fname] == "link"}]
	}

	proc autovar {name name2 op} {
		uplevel \
			[list set $name [uplevel [list ${name}_autovar $name $name2 $op]]]
		uplevel trace remove variable $name read autovar
	}

	proc $- {name_ args} {
		upvar $name_ name 
		if {[info exists name]} {
			return $name
		} else {
			return [lindex $args 0] 
		}
	}

	proc getdefault {dict key default} {
		if {[dict exists $dict $key]} {
			return [dict get $dict $key]
		} else {
			return $default
		}
	}

	proc lextract {list idx} {
		set res [list]
		foreach item $list {
			lappend res [lindex $item $idx]
		}
		return $res
	}

	proc walk {dir cmd} {
		set dir [file normalize $dir]
		if {[file isdirectory $dir]} {
			set fnames [glob -nocomplain -directory $dir -types hidden *]
			lremove fnames [file join $dir .]
			lremove fnames [file join $dir ..]
			set fnames [concat $fnames [glob -nocomplain -directory $dir *]]
		} else {
			set fnames $dir
		}
		foreach fname $fnames {
			if {[file isdirectory $fname] && ![islink $fname]} {
				walk $fname $cmd
			}
			{*}$cmd $fname
		}
    }

	proc sysexec {args} {
		set status [catch {exec {*}$args} res opts ]
		if {$status} {
			if {[lindex $opts 0] eq "ERRORCODE"} {
				set status [lindex $opts 2]
			} else {
				return -options $opts $res
			}
		}
		return [list $status $res]
	}
}
