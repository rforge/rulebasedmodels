# -*-Mode: tcl -*-
# =========================================================================
# Copyright (C) 1999,2000  Hartmut Schirmacher, Stefan Brabec
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# =============================================================================
# link.tmk: tmk module defining meta linker for linking programs and libs
# $Id: link.tmk,v 1.26 2004/09/15 06:04:19 wheidrich Exp $
# =============================================================================
# $Log: link.tmk,v $
# Revision 1.26  2004/09/15 06:04:19  wheidrich
# changes for shared libraries on Darwin/Mac OS X
#
# Revision 1.25  2002/12/12 13:06:39  brabec
# fixed thread model
#
# Revision 1.24  2002/12/09 13:38:59  brabec
# added basic thread support
#
# Revision 1.23  2002/12/09 10:45:42  brabec
# add thread support
#
# Revision 1.22  2002/07/30 09:55:26  brabec
# *** empty log message ***
#
# Revision 1.21  2001/11/01 10:36:39  ag4-adm
# fixed usage of filename_exe and filename_obj for win
#
# Revision 1.20  2001/10/29 22:15:11  brabec
# ready for Windows2000 and VisualC++
#
# Revision 1.19  2001/04/26 19:36:47  brabec
# fixes for cygwin/vc port
#
# Revision 1.18  2001/04/25 15:10:04  brabec
# *** empty log message ***
#
# Revision 1.17  2000/11/11 14:55:04  ag4-adm
# fixed LIB_ARCH
#
# Revision 1.16  2000/11/01 15:32:48  htschirm
# added ::arch_name, removed DEFAULT_ARCH
#
# Revision 1.15  2000/10/18 08:58:27  ag4-adm
# *** empty log message ***
#
# Revision 1.14  2000/10/12 07:23:36  htschirm
# added compiler init function
#
# Revision 1.13  2000/10/10 07:23:21  htschirm
# fixed a lib building bug
#
# Revision 1.12  2000/08/30 12:55:04  htschirm
# windows file names port
#
# Revision 1.11  2000/08/30 12:51:26  htschirm
# libspec bugfix
#
# Revision 1.10  2000/08/10 15:05:45  htschirm
# Windows/cygwin port
#
# Revision 1.9  2000/08/10 08:39:49  htschirm
# Windows file name port
#
# Revision 1.8  2000/08/09 12:04:21  ag4-adm
# fixed set_lib_codelevels
#
# Revision 1.7  2000/08/04 08:46:53  htschirm
# introduced exe_only
#
# Revision 1.6  2000/08/02 13:39:26  web-tmk
# fixed \$thelibs bug
#
# Revision 1.5  2000/08/01 12:20:54  htschirm
# towards 0.9beta
#
# Revision 1.3  2000/04/24 14:46:13  ag4-adm
# fixed bug in project locations stuff
# =============================================================================

# default/init values 
set_ifndef MAKE_LIB           0
set_ifndef MAKE_EXE           1

if { $OSCLASS eq $STR_WINDOWS } {
    set_ifndef LINK_MODE      "static"
    set_ifndef MAKE_SHLIB     0
} else {
    set_ifndef LINK_MODE      "shared" ;# shared or static only
    set_ifndef MAKE_SHLIB     1
}

# meta linker options, e.g. rpath, transitive, circular, 32bit, 64bit
lappend OPTIONS "rpath" "transitive" "circular"
lappend LIB_OPTIONS   
lappend SHLIB_OPTIONS 
lappend EXE_OPTIONS   

set_ifndef LIB_OBJ       {}
set_ifndef PROGRAMS      {}
set_ifndef LIBPATH       {}
set_ifndef SYSLIBS       {}
set_ifndef PROJLIBS      {}
set_ifndef EXE_PROJLIBS  {}
set_ifndef EXE_SYSLIBS   {}
set_ifndef EXE_LIBPATH   {}
set_ifndef FLAGS         {} ;# passed directly to the linker

# temporarily alias PROJLIBS etc. as EXE_PROJLIBS etc.
proc exe_only {code} {
    if [info exists ::link::exe_only_flag] {
	exit_msg "cannot nest exe_only commands"
    } else {
	set ::link::exe_only_flag 1
    }
    # save old variable names and use 'trace' to reate aliases
    foreach var {OPTIONS LIBPATH SYSLIBS PROJLIBS} {
	eval set ::link::SAVE_$var \$::link::$var
	eval set ::link::$var \$::link::EXE_$var

	# on read: just return the other value
	trace variable ::link::$var "r" ::link::read_$var
	proc ::link::read_$var {args} [list return \$::link::EXE_$var]
	# on write: 'write through' to EXE_..., then restore old value 
	trace variable ::link::$var "w" ::link::write_$var
	proc ::link::write_$var {args} [subst -nocommands {
	    set ::link::EXE_$var \$::link::$var
	}]
    }

    # now exec the script in the original context
    uplevel 1 $code

    # delete traces
    foreach var {OPTIONS LIBPATH SYSLIBS PROJLIBS} {
	trace vdelete ::link::$var "r" ::link::read_$var
	trace vdelete ::link::$var "w" ::link::write_$var
	eval set ::link::$var \$::link::SAVE_$var
    }
    unset ::link::exe_only_flag
}

# OS-dependent config stuff
if { $OSCLASS eq $::STR_WINDOWS } {

    if {$MAKE_SHLIB} {
	log_msg "no shared lib support on windows systems, using static"
    }
    # as long as we don't know how to do it...
    eval_later {
	set_ifndef MAKE_LIB    1
	set_ifndef MAKE_SHLIB    0
	set LINK_MODE          "static"
	lremove OPTIONS        "circular"
	lremove OPTIONS        "rpath"
	lremove OPTIONS        "shared"
	lappend OPTIONS        "static"
#	lappend OPTIONS        "lib_in_lib"
	lappend OPTIONS        "transitive"
    }
} 

# Darwin doesn't need the rpath flag but it does need soname
if { $OS eq "Darwin" } {
    set MAKE_LIB        1
    lremove OPTIONS     "rpath"
    lappend OPTIONS     "soname"
}


# create unique name for a project library. 
# - dir is the relative project subdir (e.g. $SUBDIR)
# - libname is the intended short name for the lib (e.g. $DIRTAIL)
proc unique_lib_name { dir libname } {
    normalize_filevar dir
    normalize_filevar libname
    set libtail [file tail $libname]
    set dirtail [file tail $dir]
    regsub -all {/} $dir {_} dir
    regsub -all {\.} $dir {} dir
    if [string compare $libtail $dirtail] {
	return "${dir}_$libtail"
    } else {
	return "${dir}"
    }
}

# find the absolute path for a project lib
proc find_projlib_dir {projlib {err 0}} {

    set subdir  [lindex $projlib 0]
    set libname [projlib_name $projlib]

    # find first dir in path that actually exists
    set dir [find_proj_file $subdir]
    if {$dir eq {}} {
	if $err {
	    exit_msg "could not find project subdir $subdir"
	}
	return ""
    }
    
    # architecture / cross-architecture for the lib?
    if {[array get ::link::LIB_ARCH $libname] != {}} {
	return $dir/$::link::LIB_ARCH($libname)
    } elseif $::USE_ARCH {
	return $dir/$::ARCH
    }
}

# short name of a project lib
# - either the default unique name, or 
# - libname is a pair (subdir shortname)
proc projlib_name {projlib} {
    switch [llength $projlib] {
	"1" { return [unique_lib_name $projlib [file tail $projlib]] }
	"2" { return [lindex $projlib 1] }
    }
    set msg "project lib syntax error: \{$projlib\}\n"
    append msg "  should be either {<subdir>} or {<subdir> <libname>}"
    exit_msg $msg
}
# enable cross-codelevel linking for a list of libs
#   only works if ARCH has not been manipulated by the user!
proc set_lib_codelevel {level libs} {

    variable ::link::LIB_ARCH 
    foreach lib $libs {
	set ::link::LIB_ARCH([projlib_name $lib]) [::arch_name $level]
    }
}
# "libraries specification" methods
proc libspec { cmd args } {
    set procname ::link::libspec_$cmd
    if {[llength [info commands $procname]] == 0} {
	exit_msg "unknown library specification command: $cmd"
    }
    return [uplevel 1 $procname $args]
}
proc libspec_create { {libpath {}} {syslibs {}} {projlibs {}} \
	{opt "$LINK_MODE"}} {
    return [list $libpath $syslibs $projlibs $opt]
}
proc libspec_libpath  {spec} {
    uplevel \#0 [list dbg_msg "lib path is {[lindex $spec 0]}" 2]
    uplevel \#0 return [lindex $spec 0]
}
proc libspec_syslibs  {spec} {
    uplevel \#0 [list dbg_msg "syslibs are {[lindex $spec 1]}" 2]
    uplevel \#0 return [lindex $spec 1]
}
proc libspec_projlibs {spec} {
    uplevel \#0 [list dbg_msg "projlibs are {[lindex $spec 2]}" 2]
    uplevel \#0 return [lindex $spec 2]
}
proc libspec_options {spec} {
    uplevel \#0 [list dbg_msg "link mode is {[lindex $spec 3]}" 2]
    uplevel \#0 return [lindex $spec 3]
}
# return list of dependencies for this libspec, static libs first
proc libspec_dependencies {libspec} {
    set static_libs {}
    set shared_libs {}
    # only check proj libs so far
    foreach lib [libspec projlibs $libspec] {
	# find directory in which lib should be
	set d [find_projlib_dir $lib]
	if {$d eq {}} {
	    log_msg "could not find project subdir for $lib"
	} else {
	    # shared or static or what?
	    set file [projlib_name $lib]
	    set stat $d/[filename_lib $file]
	    set shar $d/[filename_shlib $file]
	    
	    if [lcontains [libspec options $libspec] "static"] {
		lappend static_libs $stat
	    } else {
		if {(![file exists $shar]) && [file exists $stat]} {
		    lappend static_libs $stat
		} else {
		    lappend shared_libs $shar
		}
	    }
	}
    }
    return [list {*}$static_libs {*}$shared_libs]
}

# return list of pairs (directory, libname) for the proj libs
proc libspec_projlib_list {libspec {err 0}} {
    set static_libs {}
    set shared_libs {}

    # only check proj libs so far
    foreach lib [libspec projlibs $libspec] {
	# find directory in which lib should be
	set d [find_projlib_dir $lib $err]
	set n [projlib_name $lib]
	if {$d eq {}} {
	    if $err {
		exit_err "project subdir [lindex $lib 0] not found."
	    }
	    set d "<subdir not found: [lindex $lib 0]>"
	}

	# shared or static or what (static first!)
	set stat $d/[filename_lib $n]
	set shar $d/[filename_shlib $n]
	
	if [lcontains [libspec options $libspec] "static"] {
	    lappend static_libs [list $d $n]
	} else {
	    if {(![file exists $shar]) && [file exists $stat]} {
		lappend static_libs [list $d $n]
	    } else {
		lappend shared_libs [list $d $n]
	    }
	}
	
    }

    return [list {*}$static_libs {*}$shared_libs]
}

# return new libspec that also contains transitively linked libraries
#   if the specified meta options say so (contain "transitive")
proc libspec_transitive {libspec opt} {

    set result $libspec
    if [lcontains $opt "transitive"] {

	# look for each projlib we find a .libspec file there
	foreach p [libspec projlib_list $libspec] {
	    set dir [lindex $p 0]
	    set lib [lindex $p 1]
	    set file "$dir/[file rootname [filename_lib $lib]].libspec"
	    if [file exists $file] {
		dbg_msg "processing transitive libs in $file" 2
		if [catch {set trans [source $file]} msg] {
		    exit_msg "could not read library spec $file:\n  $msg"
		}
		set result [libspec merge $result $trans]
		
	    } else {
		dbg_msg "no file $file" 2
	    }
	}
	
	set p [lminus [libspec projlibs $result] [libspec projlibs $libspec]]
	set s [lminus [libspec syslibs  $result] [libspec syslibs  $libspec]]
	dbg_msg "additional transitive libs: \[[concat $p $s]\]" 1

    } else {
	dbg_msg "no transitive linking, option $opt" 0
    }


    return $result
}

# return tmk script that sets this libspec
proc libspec_dump {libspec targetname} {

    set comment(libpath)  "path for finding all the libs"
    set comment(syslibs)  "external/system libraries"
    set comment(projlibs) "project libraries (project-relative path)" 
    set comment(options)  "misc lib options"

    set    r "# additional libs needed for using $targetname\n"
    append r "# (enables tmk to do transitive linking)\n\n"

    append r "namespace eval ::tmk::tmp {\n\n"

    foreach x {libpath syslibs projlibs options} {

	append r "  # $comment($x)\n"
	set list [join [libspec $x $libspec] "\n    "]
	if {[llength $list] > 1} {
	    append r "  variable $x \{\n    ${list}\n  \}\n\n"
	} else {
	    append r "  variable $x \{${list}\}\n\n"
	}

    }

    append r "  return \[::link::libspec create \\\{\$libpath\\\} \\\{\$syslibs\\\} \\\{\$projlibs\\\} \\\{\$options\\\}\]\n"
    append r "}\n"
    return $r
}

# evaluate and merge two libspecs and return a new one
# if unify is set, then only merge libs/paths from spec2 that are not in spec1
proc libspec_merge {spec1 spec2 {unify 1}} {

    foreach x {libpath syslibs projlibs options} {
	variable $x {}
	set l1 [libspec $x $spec1]
	set l2 [libspec $x $spec2]
	if $unify {
	    foreach y $l2 { if {![lcontains $l1 $y]} {lappend l1 $y} }
	    set $x $l1
	} else {
	    set $x [list {*}$l1 {*}$l2]
	}
#	eval puts \"$x = \$$x\"
    }

    return [libspec create \{$libpath\} \{$syslibs\} \
	    \{$projlibs\} \{$options\}] 
}


# create target for generating a local static library
# * please note that the _expr expressions will not be evaluated
#   before inside the target command / dependency check
# * returns targetname (e.g. use as in "build [make_lib ...]")
proc make_lib {libname obj_expr \
	{libspec undef} {flags_expr undef} {opt_expr undef}} {

    # some reasonable default values
    if {$libspec eq "undef"} {set libspec [::link::default_libspec]}
    if {$flags_expr eq "undef"} { set flags_expr {[::link::ld_flags]} }
    if {$opt_expr eq "undef"} { 
	set opt_expr {[list {*}$::link::LIB_OPTIONS {*}$::link::OPTIONS]}
    }

    # generate target for lib, and add libspec as secondary dependencies
    set trans "\[::link::libspec transitive [list $libspec] $opt_expr\]"
    set rule {

	if {[llength \$SRC] eq 0} {
	    dbg_msg "\$TARGET skipped - no object files"
	    target_untouched \$TARGET
	} else {
	    set thelibs $trans
	    if {![lcontains $opt_expr "lib_in_lib"]} {
		# only dump libs into info file
		set libs [::link::libspec dump \$thelibs \$TAIL]
		write_file \$ROOT.libspec libs 
		set thelibs [::link::libspec create] ;# reset to empty libspec
	    } else {
		file delete -force -- \$ROOT.libspec
	    }
	    ::\${link::LINKER}::link_lib \
		    [file nativename \$TARGET]\
	            [lmap \$SRC {[file nativename \$ITEM]}]\
		    \$thelibs $flags_expr $opt_expr
	}
    }

    target $libname $obj_expr [subst -nocommands $rule]
    depend $libname "\[::link::libspec dependencies $trans\]"

    return $libname
}
# create target for generating a local shared library
# * please note that flags_expr and options_expr will not be evaluated
#   before inside the target command and inside the dependency check
# * returns targetname (e.g. use as in "build [make_lib ...]")
proc make_shlib {libname obj_expr \
	{libspec undef} {flags_expr undef} {opt_expr undef} } {

    # some reasonable default values
    if {$libspec eq "undef"} {set libspec [::link::default_libspec]}
    if {$flags_expr eq "undef"} {set flags_expr {[::link::ld_flags]}}
    if {$opt_expr eq "undef"} { 
	set opt_expr {[list {*}$::link::SHLIB_OPTIONS {*}$::link::OPTIONS]}
    }

    # generate target for lib, and add libspec as secondary dependencies
    set trans "\[::link::libspec transitive [list $libspec] $opt_expr\]"
    set rule {
	if {[llength \$SRC] == 0} {
	    dbg_msg "\$TARGET skipped - no object files"
	    target_untouched \$TARGET
	} else {
	    set opt      $opt_expr
	    global ::__UseThreads 
	    if \$::__UseThreads {
		set threaded "yes"
	    } else {
		set threaded "no"
	    }

	    if { \$threaded eq "yes" } {
		lappend opt "async"
	    }
	    set thelibs $trans
	    if {![lcontains \$opt "lib_in_lib"]} {
		# only dump libs into info file
		set libs [::link::libspec dump \$thelibs \$TAIL]
		write_file \$ROOT.libspec libs 
		set thelibs [::link::libspec create] ;# reset to empty libspec
	    } else {
		file delete -force -- \$ROOT.libspec
	    }
	    ::\${link::LINKER}::link_shlib \
		    [file nativename \$TARGET] \
		    [lmap \$SRC {[file nativename \$ITEM]}] \
		    \{\} \$thelibs $flags_expr \$opt

	    set allObjects "[lmap \$SRC {[file nativename \$ITEM]}]"
	    write_file \$ROOT.object_list allObjects
	}
    }
    target $libname $obj_expr [subst -nocommands $rule]
    depend $libname "\[::link::libspec dependencies $trans\]"
    return $libname
}

# the exactly same procedure
proc ::link::make_shobj {libname obj_expr \
	{libspec undef} {flags_expr undef} {opt_expr undef} } \
	[info body make_shlib]

# create target for generating an executable 
# * please note that flags_expr and options_expr will not be evaluated
#   before inside the target command and inside the dependency check
# * returns targetname (e.g. use as in "build [make_lib ...]")
proc make_exe {exename obj_expr \
	{libspec undef} {flags_expr undef} {opt_expr undef} } {

    # some reasonable default values
    if {$libspec eq "undef"} {set libspec [::link::default_libspec exe]}
    if {$flags_expr eq "undef"} {set flags_expr {[::link::ld_flags]}}
    if {$opt_expr eq "undef"} { 
	set opt_expr {[list {*}$::link::EXE_OPTIONS {*}$::link::OPTIONS]}
    }

    # generate target for lib, and add libspec as secondary dependencies
    set trans "\[::link::libspec transitive [list $libspec] $opt_expr\]"
    set rule {
	set thelibs $trans
	set opt      $opt_expr
	global ::__UseThreads 
	if \$::__UseThreads {
	    set threaded "yes"
	} else {
	    set threaded "no"
	}

	if { \$threaded eq "yes" } {
	    lappend opt "async"
	}
	::\$\{link::LINKER\}::link_exe \
		[file nativename \$TARGET] \
		[lmap \$SRC {[file nativename \$ITEM]}] \
		\$thelibs $flags_expr \$opt
    }
 
    # no longer: set exename [filename_exe $name]
    target $exename $obj_expr [subst -nocommands $rule]
    depend $exename "\[::link::libspec dependencies $trans\]"

    return $exename
}   
# create default libspec including (or not) the (existant?) local library
proc default_libspec {args} {
    if [lcontains $args "exe"] {
	return [libspec create \
		{[list {*}$::link::LIBPATH {*}$::link::EXE_LIBPATH]} \
		{[list {*}$::link::SYSLIBS {*}$::link::EXE_SYSLIBS]} \
		{[::link::default_exe_libs]} \
		{$::link::LINK_MODE}]
    } else {
	return [libspec create \
		{$::link::LIBPATH} \
		{$::link::SYSLIBS} \
		{$::link::PROJLIBS} \
		{$::link::LINK_MODE}]
    }
}

# if lib building is on and there are any library objects, add the local lib
# -> this is executed at the very last moment
proc default_exe_libs {} {
    set libs [list {*}$::link::PROJLIBS {*}$::link::EXE_PROJLIBS]
    if {($::link::MAKE_LIB || $::link::MAKE_SHLIB) && \
	    [llength $::link::LIB_OBJ]} {
	return [list $::SUBDIR {*}$libs]
    }
    return $libs
}

# merges and returns generic and compiler-specific linker flags
proc ld_flags {} {
    return [list {*}$::link::FLAGS {*}[set ::${::link::LINKER}::LDFLAGS]]
}

# ----------- begin 'main' ------------- 

# create local libraries and executables
eval_later {
    
    # default: make a local lib from all objects listed in LIB_OBJ
    set local_libname [unique_lib_name $SUBDIR $DIRTAIL]
    
    # generate targets for building the libs
    if $MAKE_LIB {
	build [make_lib [filename_lib $local_libname] {$::link::LIB_OBJ}]
    }
    if $MAKE_SHLIB {
	build [make_shlib [filename_shlib $local_libname] {$::link::LIB_OBJ}]
    }
    
    # use variables as late as possible, so all modules can add files to it
    eval_later {

	# initially, the actual linker implementation is set to "link",
	# so the procedures within this namespace will be used. For
	# actually linking lateron, the LINKER variable must be set to the
	# namespace of some language/linker module, e.g. cxx or c
	set_ifndef LINKER "link"

	# determine object file for each exe file
	set prog_pairs {}
	foreach exe $PROGRAMS {
	    switch [llength $exe] {
		1 { set obj $exe }
		2 { set obj [lindex $exe 1]; 
		    set exe [lindex $exe 0] }
		default {
		    exit_msg "syntax error in ::link::PROGRAMS: $PROGRAMS"
		}
	    }
	    lappend prog_pairs [list [filename_exe $exe] \
		                     [filename_obj $obj]  ]
	}

	# remove PROGRAMS object files from LIB_OBJ 
	set LIB_OBJ [lminus $LIB_OBJ [lmap $prog_pairs {[lindex $ITEM 1]}]]

	# if desired, link executables from files in $PROGRAMS
	if $MAKE_EXE {
	    # first we generate a list of rules
	    set all_exe_tmp {}
	    foreach pair $prog_pairs {
		set exe [lindex $pair 0]
		set obj [lindex $pair 1]
		if {$MAKE_LIB || $MAKE_SHLIB} {
		    # link against local lib
		    lappend all_exe_tmp [make_exe $exe \{$obj\}]
		} else {
		    # link local object files directly
		    lappend all_exe_tmp [make_exe $exe "\[concat $obj \$::link::LIB_OBJ\]"]
		}
	    }

	    # now do all the remaining exe's 
	    foreach e $all_exe_tmp {
		build $e
	    }
	}
	
	# if we do not want to use a lib, we should at least build all the 
	# object files
	if { (!$MAKE_LIB) && (!$MAKE_SHLIB) } {
	    build $LIB_OBJ
	}
	
    }

}

# dummy implementations of the actual linker commands
proc link_dummy {cmd rest} {
    puts stderr ">>> linker: $cmd $rest <<<"
    set msg "must choose a linker implementation by setting link::LINKER to"
    append msg "\n  the name of a compiler module (e.g. \"cxx::mipspro\")"
    exit_msg $msg
}
proc link_lib   {args} {link_dummy link_lib   $args}
proc link_shlib {args} {link_dummy link_shlib $args}
proc link_exe   {args} {link_dummy link_exe   $args}

