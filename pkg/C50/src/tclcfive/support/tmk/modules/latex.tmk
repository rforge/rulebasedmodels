# -*-Mode: tcl -*-

# =============================================================================
# latex.tmk: tmk module for supporting latex/bibtex compilation
# (C)opyright 1999 by Hartmut Schirmacher (hartmut@acm.org)
# =============================================================================
# $Id: latex.tmk,v 1.8 2000/07/20 16:15:57 htschirm Exp $
# =============================================================================
# $Log: latex.tmk,v $
# Revision 1.8  2000/07/20 16:15:57  htschirm
# towards tmk release 0.9
#
# Revision 1.7  2000/04/24 14:03:45  brabec
# added default EXCLUDE set_ifundef
#
# Revision 1.6  2000/04/22 16:23:36  htschirm
# new names for user-visible function
#
# Revision 1.5  2000/04/20 11:38:00  htschirm
# lots of new names
#
# Revision 1.4  2000/04/10 14:52:16  htschirm
# replaced empty dependency lists by ALWAYS_BUILD
#
# Revision 1.3  1999/09/24 07:42:08  htschirm
# Name change.
#
# Revision 1.2  1999/06/17 09:39:00  ag4-adm
# added missing -I$ARCH
#
# Revision 1.1  1999/05/31 20:45:42  htschirm
# Fixed modules and sync'd them with the documentation.
#
# =============================================================================

# should be empty on default
set_ifndef EXCLUDE           {}

# executables
set_ifndef LATEX   [exec which latex]
set_ifndef BIBTEX  [exec which bibtex]
set_ifndef DVIPS   [exec which dvips]
set_ifndef PSTOPDF [exec which ps2pdf]

# module config
set_ifndef USE_AUTO_DVI 1
set_ifndef USE_AUTO_PS  1
set_ifndef USE_AUTO_PDF 1
set_ifndef LATEXFLAGS ""
set_ifndef DVIPSFLAGS ""
set_ifndef BIBTEXFLAGS ""
set_ifndef PSTOPDFFLAGS ""
set_ifndef LATEX_CLEAN_SUFFIXES "*.dvi *.aux *.log *.bbl *.blg *.toc"
set_ifndef LATEX_UNDEF_REF "LaTeX Warning: There were undefined references."
set_ifndef LATEX_NO_BBL "No file "
set_ifndef LATEX_LABELS_CHANGED "LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right."

# TEXINPUTS are inferred from $env(TEXINPUTS)
if {![info exists TEXINPUTS]} {
    if [info exists env(TEXINPUTS)] {
	set TEXINPUTS [split $env(TEXINPUTS) ":"]
    } else {
	set TEXINPUTS .
    }
}

# BIBINPUTS are inferred from $env(BIBINPUTS)
if {![info exists BIBINPUTS]} {
    if [info exists env(BIBINPUTS)] {
	set BIBINPUTS [split $env(BIBINPUTS) ":"]
    } else {
	set BIBINPUTS .
    }
}

# for an expression <A><B>{<C>}<D>, extract [string trim <C>] 
#   and return <D> in $restname
proc getStringInBraces { txt B restname} {

    set marker "::tmk::__INPUT__DIRECTIVE__"
    set findexp "${B}\[ \t\n\]*{\(\[^\}\]*\)}"
    
    upvar $restname rest
    
    # replace the desired name by a marker
    set p [regexp -- $findexp $txt match name]
    if { $p == 1 } {

	# forget everything before the found text
	set q [string first $match $txt]
	set l [string length $match]
	assert {$q != -1}
	set rest [string range $rest [expr $q + $l] end]
	return [string trim $name]

    } else {

	# not found: no rest, no name
	set rest ""
	return ""
    }
    
}

# make dependencies by scanning for \input and \usepackage
proc latexMakeDepend { tex } {

    global TEXINPUTS BIBINPUTS
    assert {[info exists TEXINPUTS]}
    
    if { ![file readable $tex] } {
	dbg_msg "could not read file $tex for dependencies."
	return
    }

    # read file into line list
    set txt [split [exec cat $tex] "\n"]
    set files [list]
    set targetname "[file rootname $tex].dvi"
    
    # remove comments
    set rest ""
    foreach line $txt {
	set p [string first "%" $line]
	if { $p != -1 } {
		set line [string range $line 0 [expr $p - 1]]
	}
	lappend rest $line
    }
    
    # look for all \input{} directives
    set names "x"
    while {[llength $names]} {
	set names [split [getStringInBraces $rest "\\\\input" rest] ","]
	foreach name $names {

	    # search in TEXINPUTS path for the dependency file
	    set firstfound [lindex [find_in_pathlist $name.tex $TEXINPUTS] 0]
	    eval lappend files $firstfound
	} 
    }

    # look for all \bibliography{} directives
    set names "x"
    while {[llength $names]} {
	set names [split [getStringInBraces $rest "\\\\bibliography" rest] ","]
	foreach name $names {

	    # search in . for the dependency file
	    set firstfound [lindex [find_in_pathlist $name.tex BIBINPUTS] 0]
	    eval lappend files $firstfound
	} 
    }

    set files [lmap $files {[normalize_filevar ITEM]}]
    return $files
}

# PS to PDF
target *.pdf {$ROOT.ps} {
    cmd $PSTOPDF $PSTOPDFFLAGS [targetname_short $SRC] [targetname_short $TARGET]
}

# DVI to PS
target *.ps {$ROOT.dvi} {
    cmd $DVIPS $DVIPSFLAGS [file rootname [targetname_short $TARGET]]
}

# if we have the aux and log files, we can analyse what has happened
target *.dvi {$ROOT.aux $ROOT.log} {

    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname   $TARGET]

    # check if there are undefined references or changed labels etc.
    set loops 0
    set log [exec cat $ROOT.log]
    set nobbl "$LATEX_NO_BBL$ROOT.bbl"
    if { [string first $LATEX_UNDEF_REF $log] != -1} {
	dbg_msg "running BibTeX + 2*LaTeX because there are undefined references"
	cmd $BIBTEX $BIBTEXFLAGS $ROOT
	set loops 2
    } elseif { [string first $nobbl $log] != -1 } {
	dbg_msg "running BibTeX + 2*LaTeX because there's no bbl file"
	cmd $BIBTEX $BIBTEXFLAGS $ROOT
	set loops 2
    } elseif { [string first $LATEX_LABELS_CHANGED $log] != -1 } {
	dbg_msg "running LaTeX once more in order to get references right"
	set loops 1
    }
    while {$loops} { 
	incr loops -1
	cmd $LATEX $LATEXFLAGS $ROOT
    }

}

# TEX to aux / log
target {*.log *.aux} {$ROOT.tex} {

    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname   $TARGET]

    # run LaTeX once
    cmd $LATEX $LATEXFLAGS $SRC
}


# detect source files
set TEXFILES [glob -nocomplain *.tex]

# don't forget included TeX files and bibliography stuff
foreach texfile $TEXFILES {    

    set dviname [file rootname $texfile].dvi 
    set auxname [file rootname $texfile].aux
    set bblname [file rootname $texfile].bbl
    
    # get all dependency files with path names
    set depfiles [latexMakeDepend $texfile]

    # all .tex are "normal" dependencies
    depend $dviname [lfilter $depfiles \
	    {[string compare [file extension $ITEM] .tex] == 0}]
    
    # all .bib files require special rules and dependencies
    set bibfiles [lfilter $depfiles \
	    {[string compare [file extension $ITEM] .bib] == 0}]
    if {[llength $bibfiles] && [file exists $auxname]} { 
	depend $dviname $bblname
	target $bblname [concat $auxname $bibfiles] {
	    cmd $BIBTEX $BIBTEXFLAGS [file rootname [targetname_short $TARGET]]
	}
	    
    }
}

# when cleaning, also clean temporary LaTeX files
depend clean latexclean
target latexclean ALWAYS_BUILD {
    cmd rm -f [eval glob -nocomplain $LATEX_CLEAN_SUFFIXES]
}

# check if file is a "main" file containing a document
proc LaTeXisMain { file } {
    set exp "\\\\begin\[ \t\n\]*\{\[ \t\n\]*document\[ \t\n\]*\}"
    set txt [exec cat $file]
    return [regexp $exp $txt]
}

eval_later {

    # filter those files which contain a \begin{document}
    set mainfiles [lfilter $TEXFILES {[LaTeXisMain $ITEM]}]
    dbg_msg "all  LaTeX files = $TEXFILES"
    dbg_msg "main LaTeX files = $mainfiles"

    # automatically build .dvi's?
    if $USE_AUTO_DVI { 
	set dvifiles [lmap $mainfiles {$IROOT.dvi}]
	build [lminus $dvifiles $EXCLUDE]
    }

    # automatically build .ps's?
    if $USE_AUTO_PS { 
	set psfiles [lmap $mainfiles {$IROOT.ps}]
	build [lminus $psfiles $EXCLUDE]
    }

    # automatically build .pdf's?
    if $USE_AUTO_PDF { 
	set pdffiles [lmap $mainfiles {$IROOT.pdf}]
	build [lminus $pdffiles $EXCLUDE]
    }

}
