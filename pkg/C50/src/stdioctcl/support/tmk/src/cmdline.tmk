# =========================================================================
# Copyright (C) 1999-2005  Hartmut Schirmacher, Stefan Brabec,
#                          Hitoshi Yamauchi 
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# ===========================================================================
# $Id: cmdline.tmk,v 1.14 2005/09/23 11:17:28 yamauchih Exp $
# command line option actions for tmk
# ===========================================================================
# $Log: cmdline.tmk,v $
# Revision 1.14  2005/09/23 11:17:28  yamauchih
# add version related options
#
# Revision 1.13  2005/07/06 21:28:10  yamauchih
# add -nomakef option
#
# Revision 1.12  2005/04/23 20:53:58  yamauchih
# add runmode to build 64bit executables
#
# Revision 1.11  2002/12/10 13:34:05  brabec
# *** empty log message ***
#
# Revision 1.10  2000/11/01 15:32:48  htschirm
# added ::arch_name, removed DEFAULT_ARCH
#
# Revision 1.9  2000/08/30 13:20:51  htschirm
# -proto experimental option etc.
#
# Revision 1.8  2000/08/30 12:50:25  htschirm
# introduced SUBDIR_PROCESSING and local_only
#
# Revision 1.7  2000/08/10 08:39:49  htschirm
# Windows file name port
#
# Revision 1.6  2000/08/07 15:28:57  htschirm
# *** empty log message ***
#
# Revision 1.5  2000/08/01 12:19:25  htschirm
# towards 0.9beta
#
# Revision 1.4  2000/07/20 16:15:58  htschirm
# towards tmk release 0.9
#
# Revision 1.3  2000/05/05 08:24:04  htschirm
# -mod
# ===========================================================================

# flags without arguments
set __OPT_ACTION(-rules)    {lappend ::tmk::todo rules} 
set __OPT_ACTION(-reconfig) {set __ForceReconfig 1}
set __OPT_ACTION(-sysinfo)  {set __SysInfoOnly 1}
set __OPT_ACTION(-prf)      {set CODELEVEL $CL_PRF}
set __OPT_ACTION(-dbg)      {set CODELEVEL $CL_DBG}
set __OPT_ACTION(-std)      {set CODELEVEL $CL_STD}
set __OPT_ACTION(-opt)      {set CODELEVEL $CL_OPT}
set __OPT_ACTION(-max)      {set CODELEVEL $CL_MAX}
set __OPT_ACTION(-force)    {set __ForceBuilding 1}
set __OPT_ACTION(-pretend)  {set __DisplayCommandsOnly 1}
set __OPT_ACTION(-noarch)   {set USE_ARCH 0}
set __OPT_ACTION(-debug)    {incr __DbgLevel}
set __OPT_ACTION(-nodebug)  {set __DbgLevel 0}
set __OPT_ACTION(-verbose)  {set __DoLog 1}
set __OPT_ACTION(-silent)   {set __DoLog 0}
set __OPT_ACTION(-mfdepend) {set __SelfDepend 1}
set __OPT_ACTION(-local)    {set ::SUBDIR_PROCESSING none}
set __OPT_ACTION(-noproj)   {set __ProjectMakefile "{}"}
set __OPT_ACTION(-nopriv)   {set __PrivateProjectMakefile "{}"}
set __OPT_ACTION(-nomakef)  {set __ReadMakefileOn 0}

# -proto is a yet undocumented, experimental feature, see file_proto.tmk
set __OPT_ACTION(-proto)    {
    source $tmk::dir_src/file_proto.tmk
    lappend __ExecBefore {tmk::proto_on}
}

# ==========================================================================
# options with arguments
# - __args is the number of remaining arguments 
# - __rest is the remaining list of arguments / options
# ==========================================================================

# set the prefix used in tmk's log messages 
set __OPT_ACTION(-prefix) {
    if {$__args <= 0} {__ExitWithSyntax}
    set __OutputPrefix [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
}

# explicitly specify project TMakefile
set __OPT_ACTION(-proj) {
    if {$__args <= 0} {__ExitWithSyntax}
    set __ProjectMakefile [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
}

# explicitly specify private TMakefile
set __OPT_ACTION(-priv) {
    if {$__args <= 0} {__ExitWithSyntax}
    set __PrivateProjectMakefile [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
}

# explicitly specify name of $ARCH (architecture-dependent output directory)
set __OPT_ACTION(-arch) {
    if {$__args <= 0} {__ExitWithSyntax}
    set USE_ARCH 1
    set ARCH [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
}

# explicitly request a module to be loaded (after reading TMakefile)
set __OPT_ACTION(-mod) {
    if {$__args <= 0} {__ExitWithSyntax}
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	eval_later "module [lindex $__rest 0]"
	set __rest [lrange $__rest 1 end]
	incr __args -1
    }
}
# display configured module versions
set __OPT_ACTION(-modver) {
    if {$__args <= 0} {__ExitWithSyntax}
    set __mod [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
    set cmd {
	if [catch {namespace children $__mod}] {
	    puts "no versions of module $__mod found."
	    exit
	}
	set mods [tmk::children_namespaces $__mod] 
	set mods [lmap \$mods {[string range \$ITEM 2 end]}]
	lremove mods tmk
	lremove mods tmk::*
	set mods [lsort \$mods]
	puts "versions for module ${__mod}:\n  [join \$mods "\n  "]"
	exit 0
    }
    lappend __ExecBefore [subst -nocommands $cmd]
}
# set number of threads 
set __OPT_ACTION(-par) {
    if {$__args <= 0} {__ExitWithSyntax}
    set got_it 0
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	if {!$got_it} {
	    set __ParProcesses -1
	    catch {set __ParProcesses [format %d [lindex $__rest 0]]}
	    if {$__ParProcesses == -1} {
		log_msg "argument for -par is not a positive integer"
		__ExitWithSyntax
	    }
	    if {$__ParProcesses < 0} {
		log_msg "argument for -par is negative"
		__ExitWithSyntax
	    }

	    set got_it 1 
	} else {
	    log_msg "multiple arguments for -par"
	    __ExitWithSyntax
	}
	set __rest [lrange $__rest 1 end]
	incr __args -1
    }
}

# execute a Tcl/tmk command (before reading TMakefile)
set __OPT_ACTION(-cmd) {
    if {$__args <= 0} {__ExitWithSyntax}
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	lappend __ExecBefore [lindex $__rest 0]
	set __rest [lrange $__rest 1 end]
	incr __args -1
    }
}

# execute a Tcl/tmk command (before reading TMakefile)
set __OPT_ACTION(-init) {
    if {$__args <= 0} {__ExitWithSyntax}
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	lappend __ExecInit [lindex $__rest 0]
	set __rest [lrange $__rest 1 end]
	incr __args -1
    }
}

# pretent that a list of targets does not need update
set __OPT_ACTION(-nup) {
    if {$__args <= 0} {__ExitWithSyntax}
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	set __target [lindex $__rest 0]
	set __rest [lrange $__rest 1 end]
	incr __args -1
	lappend __mark_untouched $__target
    } 
}

# pretend that a list of targets has just been updated
set __OPT_ACTION(-up) {
    if {$__args <= 0} {__ExitWithSyntax}
    while {($__args > 0) && ([string range $__rest 0 0] ne "-")} {
	set __target [lindex $__rest 0]
	set __rest [lrange $__rest 1 end]
	incr __args -1
	lappend __mark_updated $__target
    }       
} 

# force building of all default targets or explicitly listed targets	
set __OPT_ACTION(-f) {
    if {$__args <= 0} {__ExitWithSyntax}
    set __Makefilename [lindex $__rest 0]
    normalize_filevar __Makefilename
    set __rest [lrange $__rest 1 end]
    incr __args -1
}

# define a Tcl/tmk variable(s). if no value given, set to 1
set __OPT_ACTION(-D) {
    if {$__args <= 0} {__ExitWithSyntax}
    set v [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
    set vv [split $v =]
    set varname ::[lindex $vv 0]
    if {[llength $vv]==1} {
	set value 1
    } else {
	set value [lindex $vv 1]
    }
    set ns [namespace qualifiers $varname]
    set v  [namespace tail $varname]
    lappend __ExecBefore [list namespace eval $ns [list variable $v $value]]
}

# undefine a Tcl/tmk variable
set __OPT_ACTION(-U) {
    if {$__args <= 0} {__ExitWithSyntax}
    set v ::[lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
    set ns [namespace qualifiers $v]
    set v  [namespace tail $v]
    lappend __ExecBefore [list namespace eval $ns [list unset $v]]
}

# trace writing access to an arbitrary variable; no unset ops yet
set __OPT_ACTION(-vtrace) {
    if {$__args <= 0} {__ExitWithSyntax}
    set varname [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
    # find namespace, so we can create it...
    set ns [tmk::full_namespace $varname]
    set v  [namespace tail $varname]
    set p  [tmk::trace_proc_name $varname]
    namespace eval $ns {}
    trace variable ${ns}::$v w $p
    set body {
	set where [uplevel 1 info script]
	log_msg "\\\[vtrace\\\] $varname = \$${ns}::$v"
	log_msg "         (in file \$where)"
    }
    proc $p args [subst -nocommands $body]
    lappend ::tmk::traced_vars ${ns}::$v
}

# trace calls to an arbitrary procedure
set __OPT_ACTION(-ptrace) {
    if {$__args <= 0} {__ExitWithSyntax}
    set pname [lindex $__rest 0]
    set __rest [lrange $__rest 1 end]
    incr __args -1
    # find namespace, so we can create it...
    set ns [tmk::full_namespace $pname]
    set v  [namespace tail $pname]
    set p  ${ns}::$v
    set tp [tmk::trace_proc_name $pname]_proc
    set doit {
	if {[info commands $p] eq {}} {
	    log_msg "WARNING: cannot trace $p (not defined yet)"
	} else {
	    namespace eval $ns {}
	    rename $p $tp
	    proc $p args {
		set where [uplevel 1 info script]
		log_msg "\\\[ptrace\\\] $p \$args"
		log_msg "         (in file \$where)"
		return [eval $tp \$args]
	    }
	}
    }
    # if command does not exist yet, try to rename later...
    if {[info commands $pname] eq {}} {
	lappend __ExecBefore [subst -nocommands $doit]
    } else {
	eval [subst -nocommands $doit]
    }
}

# set run mode (For example, 64 bit mode)
set __OPT_ACTION(-setrunmode) {
    global __AvailableRunModeStatLList

    if {$__args <= 1} {__ExitWithSyntax}
    set k        [lindex $__rest 1]
    set v        [lindex $__rest 2]
    set __rest   [lrange $__rest 3 end]
    incr __args -2
    
    if [::tmk::set_runmodestat $k $v] {
	dbg_msg "tmk runs under $k."
    } else {
	set txt "no such runmode: $k is available. candidates:"
	foreach key [array names __AvailableRunModeStatLList] {
	    append txt "\n\t$key : $__AvailableRunModeStatLList($key)"
	}
	exit_msg $txt
    }
}

# 
# version related options
# 
# output version
set __OPT_ACTION(-version)  {
    puts "ReleaseVersion: $::tmk::Release"
    puts "CoreVersion: $::tmk::CoreVersion"
    exit 1
}

# output release version
set __OPT_ACTION(-dumpversion) {
    puts $::tmk::Release
    exit 1
}

# output core version (cvs controled version)
set __OPT_ACTION(-dumpcoreversion) {
    puts $::tmk::CoreVersion
    exit 1
}
