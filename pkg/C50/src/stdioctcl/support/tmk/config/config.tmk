# ===========================================================================
# tmk: config.tmk
#
# Copyright (C) 1999-2005  Hartmut Schirmacher, Stefan Brabec
#                          Hitoshi Yamauchi
#                          Max-Planck Institute f"ur Informatik
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# ===========================================================================
# $Id: config.tmk,v 1.51 2007/10/25 12:57:28 cfuchs_sf Exp $
# configuration system's main script
# ===========================================================================
# $Log: config.tmk,v $
# Revision 1.51  2007/10/25 12:57:28  cfuchs_sf
# added support for 64-bit ag4 machines and the new ix64
#
# Revision 1.50  2005/04/23 23:25:38  yamauchih
# add runmode +folloegccname
#
# Revision 1.49  2005/04/23 20:53:57  yamauchih
# add runmode to build 64bit executables
#
# Revision 1.48  2002/11/18 11:06:54  brabec
# *** empty log message ***
#
# Revision 1.47  2001/11/01 16:45:51  ag4-adm
# now also works for non-valid file names or directories
#
# Revision 1.46  2001/10/29 22:15:10  brabec
# ready for Windows2000 and VisualC++
#
# Revision 1.45  2000/11/01 15:32:47  htschirm
# added ::arch_name, removed DEFAULT_ARCH
#
# Revision 1.44  2000/08/10 15:05:42  htschirm
# Windows/cygwin port
#
# Revision 1.43  2000/08/10 08:39:48  htschirm
# Windows file name port
#
# Revision 1.42  2000/08/08 11:38:30  ag4-adm
# *** empty log message ***
#
#
# Revision 1.34  2000/05/08 09:33:22  ag4-adm
# changed site-config handling: reading global, then private
#
# Revision 1.33  2000/05/05 14:09:57  ag4-adm
# private site-config files
# ===========================================================================

# config directory structure
set ::tmk::dir_arch     [file join ${::tmk::dir_config} "arch"]
set ::tmk::dir_site     [file join ${::tmk::dir_config} "site"]
set ::tmk::dir_privsite [file join ${::tmk::dir_priv}   "site-config"]
set ::tmk::dir_soft     [file join ${::tmk::dir_config} "soft"]
set ::tmk::dir_comp     [file join ${::tmk::dir_soft}   "comp"]
set ::tmk::dir_util     [file join ${::tmk::dir_config} "util"]

# don't print the whole path ...
proc ::tmk::ConfigLog {msg} {
    global ::tmk::dir_config 
    set tmp  [file normalize ${::tmk::dir_config}]
	 #this was a bug on OS X, where $tmp contained crazy characters
    #regsub $tmp $msg "<tmk>/config" msg
	 set msg [string map [list $tmp <tmk>/config] $msg]
#    set first [string first $tmp $msg]
#    if { $first != -1 } {
#	set head "[string range $msg 0 [expr $first - 1]]config"
#	set tail "[string range $msg [expr [string length $tmp] + $first] end]"
#	set msg "$head$tail"
#    }
    log_msg $msg
}

# execute config file
proc ::tmk::DoConfig {f {mod {}} } {

    set mod [string tolower $mod]
    if {$mod ne {}} {set mod " (in namespace $mod)"} 
    global ::CONFIG_FAILED
    set dir [file dirname $f]
    set file [string tolower [file tail $f]]
    set f [file join $dir $file]
    if { [file readable $f ] && [file isfile $f] } {
	::tmk::ConfigLog "*** reading: $f$mod"
	set ::CONFIG_FAILED [uplevel 1 [list source $f]]
    } else {
	::tmk::ConfigLog " (not found: $f)"
	set_ifndef ::CONFIG_FAILED 0
    }

    return $::CONFIG_FAILED
}

#=========================================================
# get system type: cpu, vendor and os (global variables)
#=========================================================
proc ::tmk::getSystemInformation {} {
    uplevel \#0 [list __source [file join $::tmk::dir_arch sysinfo.tmk]]

    # execute OSCLASS-dependent sysinfo script
    set file [file join "${::tmk::dir_arch}" sysinfo $::OSCLASS.tmk]
    uplevel \#0 [list __source $file]
}

# load config management methods
__source [file join $::tmk::dir_src module_config.tmk]
set ::tmk::dir_cache [config dir]

# default procedure for setting the ARCH variable, depending on 
#   some user- and system-dependent settings
config proc ::arch_name {codelevel} {
    if {($codelevel eq "dbg") || ($codelevel eq {})} {
	set cl {}
    } else {
	set cl "_$codelevel"
    }
    return "${::OS}${::OSVER}$cl"
}

# ==================================================================
# config starts here; execute in config cache namespace
# ==================================================================
# this has to be done every time - the cache file name depends on it
::tmk::getSystemInformation

# only output user info?
if $__SysInfoOnly {
    config read
    set txt {}
    read_file [file join $::tmk::dir_src sysinfo.msg] txt
    set cache_file [config name]
    set ARCH_DEF [::arch_name ""]
    puts stdout [subst -nocommands $txt]
    exit
}

# read cached config
if {![config read]} {

    # cache read failed, so parse all config files and create cache 
    ::tmk::ConfigLog "starting configuration"
    ::tmk::ConfigLog "system: $::CPU $::VENDOR $::OS $::OSVER $::HOST $::DOMAIN"
    
    # =================================================================
    # process config files in proper order
    # =================================================================

    # the directories
    set arch ${::tmk::dir_arch}
    set util ${::tmk::dir_soft}
    set comp [file join ${::tmk::dir_soft} comp]
    set util ${::tmk::dir_util}
    set site ${::tmk::dir_site}
    set priv_site ${::tmk::dir_privsite}
    set files {}

    # arch-dependent config files
    ::tmk::DoConfig [file join $arch default.tmk]
    ::tmk::DoConfig [file join $arch osclass ${::OSCLASS}.tmk]
    ::tmk::DoConfig [file join $arch os ${::OS}.tmk]
    ::tmk::DoConfig [file join $arch os ${::VENDOR}_${::OS}.tmk]
    ::tmk::DoConfig [file join $arch os ${::CPU}_${::VENDOR}_${::OS}.tmk]

    # arch-dependent utility config files
    dbg_msg "config helpers: $::CONFIG_HELPERS"
    foreach u $::CONFIG_HELPERS {
	::tmk::DoConfig [file join $util $u.tmk]
    }

    # look for all compilers in all modules
    set all_compiler_vars [config vars *::COMPILERS]
    log_msg "all compiler lists: \[$all_compiler_vars\]"
    dbg_msg "all compiler lists: \[$all_compiler_vars\]"
    foreach var $all_compiler_vars {
	set __module [string range [namespace qualifiers $var] 2 end]
	foreach __compiler [set $var] {
	    # the compiler config file is read multiple times in different
	    # namespaces; so you can use $__compiler and $__module 
	    dbg_msg "configuring $__compiler for module $__module"
	    set ns [string tolower "::${__module}::$__compiler"]
	    set file [file join $comp $__compiler.tmk] 
	    if {[catch {namespace eval $ns [list ::tmk::DoConfig $file $ns]} \
		res eopts]} {
		log_msg "configuration failed for: $__compiler: $res $eopts"
		lremove $var $__compiler
	    }
        }
    }

    # central and private site-config files 
    set addressmode [::tmk::get_runmodestat "addressmode" ]
    ::tmk::DoConfig [file join $site      site-config.tmk ]	
    ::tmk::DoConfig [file join $priv_site site-config.tmk ]	
    ::tmk::DoConfig [file join $site      site-config-${addressmode}.tmk ]	
    ::tmk::DoConfig [file join $priv_site site-config.tmk ]	
    ::tmk::DoConfig [file join $priv_site site-config-${addressmode}.tmk ]	
    set _site_config_list "${DOMAIN}          
                           ${DOMAIN}_${OSCLASS}          
                           ${HOST}
                           ${HOST}_${OSCLASS} 
                           ${HOST}_${DOMAIN} 
                           ${HOST}_${DOMAIN}_${OSCLASS}"
    foreach conf " $_site_config_list " {
	::tmk::DoConfig [file join $site      ${conf} ]	
	::tmk::DoConfig [file join $site      ${conf}_${addressmode} ]	
	::tmk::DoConfig [file join $priv_site ${conf} ]	
	::tmk::DoConfig [file join $priv_site ${conf}_${addressmode} ]	
    }

    # save all settings
    ::tmk::ConfigLog "writing [config fullname]"
    config save

    # if user specified -reconfig, don't go any further 
    if $__ForceReconfig {
	log_msg "configuration finished successfully."
	exit 0
    } 
    
    # if we want to continue, let's now read/activate the cached config
    if {![config read]} {
	exit_msg "could not read [config fullname]"
    }
}

# run init script
#set initScripts [list \
#    ${::tmk::dir_cache}/init.tmk \
#    ${::tmk::ArchConfigUtilDir}/init.tmk ]
#
#foreach f $initScripts {
#    if [file readable $f] {
#	dbg_msg "running init script $f"
#	uplevel \#0 [list source $initScript]
#	break
#    }
#}

# if ARCH is not already defined, use DEFAULT_ARCH and append CODELEVEL with runmode
ifdef ARCH {
    dbg_msg "\$ARCH already defined within config system."
} {
    set ARCH [::arch_name $CODELEVEL]

    set addressmode [::tmk::get_runmodestat "addressmode" ]
    # 64bit
    if {[regexp {Debian4\.0.*} $ARCH]} {
	set DEBCPU [exec dpkg-architecture -qDEB_BUILD_GNU_CPU]
	if {$DEBCPU eq "x86_64"} {
		set addressmode "64bit"
	}
    }
      
    if { $addressmode eq "64bit" } {
	append ARCH "_${addressmode}"
    }

    # use gcc version name with ARCH?
    set archmode [::tmk::get_runmodestat "archmode" ]
    if { $archmode eq "+gccver" } { 
	# force to add version name 
	append ARCH "_gcc$::cxx::gcc::DUMPVERSION"
    } elseif { $archmode eq "+followgccname" } { 
	# if gcc executable is explicitly specified, add gcc version name 
	if {[::tmk::get_runmodestat "gccexename" ] != "default" } {
	    append ARCH "_gcc$::cxx::gcc::DUMPVERSION"
	}
    }
}
