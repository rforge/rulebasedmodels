# $Id: pgi.tmk,v 1.1 2001/02/20 16:05:16 brabec Exp $
# configure PGI C/C++ compilers
# not fully functional !
# try to find executables, so we don't need this in the site config
switch $__module {
    cxx     {config set EXECUTABLE [auto_execok pgCC]}
    c       {config set EXECUTABLE [auto_execok pgcc]}
    default {log_msg "warning: pgi is not configured for module $__module" }
}

# we need 'ar' for linking static libs...
config set AR [auto_execok ar]


# default flags for g++ as well as for gcc
config set FLAGS_PRF {}
config set FLAGS_DBG -O0
config set FLAGS_STD -O0
config set FLAGS_OPT -O1
config set FLAGS_MAX [list -Minfo -Minline -Munroll  -Mvect=sse -fast \
    -Minline=levels:10 --no_exceptions]

# what the heck is INCTEMP?
if {$__module eq "cxx"} {
    foreach x {FLAGS_PRF FLAGS_DBG FLAGS_STD FLAGS_OPT FLAGS_MAX} {
	lappend $x -D_INCTEMP
	lappend $x --instantiation_dir
	lappend $x /var/tmp/Templates.PGCC
	lappend $x -tlocal
	lappend $x --gnu_extensions
	lappend $x --no_using_std
	lappend $x -I/usr/pgi/linux86/include/CC
	lappend $x -I/usr/pgi/linux86/include
    }
}

# default flags if this compiler is used as the linker
config set LDFLAGS_PRF {}
config set LDFLAGS_DBG {}
config set LDFLAGS_STD {}
config set LDFLAGS_OPT {}
config set LDFLAGS_MAX [list -Minline -Munroll -tp athlon -Mvect=prefetch \
    -fast -Minline=levels:10 --no_exceptions]


# flags for some of the meta compiler options
config set METAOPT(nowarn)   {}
config set METAOPT(warn)     {}
config set METAOPT(fullwarn) {}
config set METAOPT(ansi)     {}
config set METAOPT(stl)      {}
config set METAOPT(shared)   -fpic ;# ??? really ???
# config set METAOPT(32bit)   -Wl,-n32

# with gcc we don't need an external makedepend
config set EXPLICIT_MAKEDEPEND 0

# return desired meta compiler options
config proc meta_option_flags {opt} {
    variable METAOPT
    set result {}
    foreach o $opt {
	if [info exists METAOPT($o)] {
	    dbg_msg "meta option $o: flags $METAOPT($o)" 2
		#todo: should this be {*}$METAOPT($o)?
		lappend result $METAOPT($o)
	} else {
	    dbg_msg "no flags for meta option $o" 2
	}
    }
    return $result
}

# compile a source file (C or C++)
config proc compile_obj {obj src dep flags opt} {

    variable EXECUTABLE

    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
	lappend flags {*}[meta_option_flags $opt]
    set cmd [list cmd {*}$EXECUTABLE -c \
	     --one_instantiation_per_object --dependencies_to_file $dep -MD]
	lappend cmd {*}$flags
    lappend cmd  -o $obj $src
    uplevel \#0 $cmd
}

# only update dependency file, but do not compile
config proc update_dependencies {obj src dep flags opt} {
    variable EXECUTABLE
    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
    if [file exists $dep] {file delete $dep}
    lappend flags {*}[meta_option_flags $opt]
    puts "updating dependencies for $obj"
    set cmd [list cmd_quiet {*}$EXECUTABLE -E -MD --dependencies_to_file $dep]
    lappend cmd {*}$flags
    lappend cmd $src
    uplevel \#0 $cmd
    ### why no -o option? How does gcc know which is the target???
}

# link a static lib
config proc link_lib {lib obj libspec flags opt} {
    variable AR
    # hack: flags are just not passed to AR at all
	lappend flags {*}[meta_option_flags $opt]
#    set libs  [make_lib_options $libspec $opt]
    set cmd [list cmd [file nativename $AR] rf $lib]
    lappend cmd {*}$obj
    uplevel \#0 $cmd
    ### use libspec?
}

# link a shared lib
config proc link_shlib {lib obj export_obj libspec flags opt} {
    variable EXECUTABLE
    if {$export_obj ne {}} {
	log_msg "warning (gcc): no support for interface subset export"
    }
    # needed?
    if [lcontains $opt soname] {
	lappend flags -Wl,-soname=[file tail $lib]
    }
    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]
    set cmd [list cmd {*}$EXECUTABLE -shared]
    lappend cmd {*}$flags -o $lib {*}$obj \
		{*}[glob -nocomplain Template.dir/*.o] {*}$libs

    set prelink [list cmd {*}$EXECUTABLE --prelink_objects]
	lappend prelink {*}$obj {*}[glob -nocomplain Template.dir/*.o] {*}$libs
    uplevel \#0 $prelink
    uplevel \#0 $cmd
}

# link an executable
config proc link_exe {prog obj libspec flags opt} {

    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]

    global OSCLASS
    if {$OSCLASS eq $STR_WINDOWS} {
	lappend flags -Wl,-e,_mainCRTStartup
    }

    variable EXECUTABLE
    set cmd [list cmd {*}$EXECUTABLE {*}$flags]
	lappend cmd -o $prog {*}$obj {*}$libs
    set prelink [list cmd {*}$EXECUTABLE --prelink_objects]
    lappend prelink {*}$obj {*}[glob -nocomplain Template.dir/*.o] {*}$libs
    uplevel \#0 $prelink
    uplevel \#0 $cmd

}

# generate all flags for linking libs with what we are generating.
# recognized options:
# - rpath: store runtime linker paths in lib
# - circular: resolve circular inter-lib symbol dependencies
# - twice: obsolete, should use "circular"
config proc make_lib_options {libspec opt_expr} {

    set paths {}
    set libs  {}

    # ??? wie kann das sein ???
    switch $::OS {
	$STR_SUNOS   {set rpathflag -R}
	default {set rpathflag -Wl,-rpath,}
    }

    # ??? muss das echt sein? und was ist mit /usr/local? ???
    # set paths [list -L/usr/lib $rpathflag/usr/lib]

    # expand options expression, look for some of the options
    eval set opt \[list $opt_expr\]
    set circ [expr [lcontains $opt circular] || [lcontains $opt twice]]
    set rpath [lcontains $opt rpath]

    # process pairs (dir shortname)
    foreach lib [::link::libspec projlib_list $libspec] {
	
	set dir  [lindex $lib 0]
	set name [lindex $lib 1]
	if {![file isdirectory $dir]} {
	    exit_msg "directory $dir does not exist."
	}
	lappend paths -L[file nativename $dir]
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
	lappend libs -l[file nativename ${name}]
    }

    # lib path + sys libs
    foreach dir [::link::libspec libpath $libspec] {
	lappend paths -L[file nativename $dir]
	if $rpath {lappend paths $rpathflag[file nativename $dir]}
    }
    foreach lib [::link::libspec syslibs $libspec] {
	lappend libs -l[file nativename $lib]
    }

    # resolve circular inter-lib dependencies?
    # well, we can't really do this, so we just put every lib twice
    if {$circ && ([llength $libs] > 1)} {
	return [list {*}$paths {*}$libs {*}$libs]
    } else {
	return [list {*}$paths {*}$libs]
    }
}

