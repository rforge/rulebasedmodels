# $Id: mipspro.tmk,v 1.7 2002/12/10 13:34:44 ag4-adm Exp $
# configure SGI MIPSpro compiler (for both C and C++) 

# try to find executables, so we don't need this in the site config
if {[file exists /etc/compiler.defaults]} {
    dbg_msg "MIPSpro: found /etc/compiler.defaults"
    switch -exact -- [namespace tail [namespace current]] {
	cxx {catch {config set EXECUTABLE [exec which CC]}}
	c   {catch {config set EXECUTABLE [exec which cc]}}
	default {
	    log_msg "warning: MIPSpro is not configured for module [namespace tail [namespace current]]"
	}
    }
} else {
    dbg_msg "MIPSpro: no file /etc/compiler.defaults"
} 


if {[namespace tail [namespace current]] eq "cxx"} {
    config set USE_PRELINK_THREADS 1
} else {
    config set USE_PRELINK_THREADS 0
}

# default flags for MIPSpro compilers (C++ as well as C)
config set FLAGS_PRF [list -DHAVE_SSTREAM -g3]
config set FLAGS_DBG [list -DHAVE_SSTREAM -g]
config set FLAGS_STD [list -DHAVE_SSTREAM -g -O]
config set FLAGS_OPT [list -DHAVE_SSTREAM -OPT:Olimit=30000 -O2]
config set FLAGS_MAX [list -DHAVE_SSTREAM -OPT:Olimit=50000 -O3 -INLINE -LNO -IPA]

 

# default flags if MIPSpro is used as the linker 
config set LDFLAGS_PRF {}
config set LDFLAGS_DBG {}
config set LDFLAGS_STD {}
config set LDFLAGS_OPT {}
config set LDFLAGS_MAX -IPA

# flags for some of the meta compiler options
config set METAOPT(nowarn)   [list -woff all]
config set METAOPT(warn)     -Wl,-woff,15,-woff,84,-woff,129,-multigot
config set METAOPT(fullwarn) -fullwarn
config set METAOPT(ansi)     -ansi
config set METAOPT(std)      -LANG:std
config set METAOPT(32bit)    -n32
config set METAOPT(64bit)    -64 -TENV:large_got=ON

# with MIPSpro we don't need an external makedepend
config set EXPLICIT_MAKEDEPEND 0

# return desired meta compiler options 
config proc meta_option_flags {opt} {
    variable METAOPT
    set result {}
    foreach o $opt {
	if [info exists METAOPT($o)] {
	    dbg_msg "meta option $o: flags $METAOPT($o)" 2
		#todo: should this be {*}$METAOPT($o)?
		lappend result $METAOPT($o)
	} else {
	    dbg_msg "no flags for meta option $o" 2
	}
    }
    return $result
}

# compile a source file (C or C++) 
config proc compile_obj {obj src dep flags opt} {
    variable EXECUTABLE

    # 'compile it' command
    variable USE_PRELINK_THREADS

    set flags_prelink {}
    if $USE_PRELINK_THREADS {
	if [info exists ::__UseThreads] {
	    if $::__UseThreads { 
		set flags_prelink [list -J $::__MaxThreads]
	    }
	}
    }

	lappend flags {*}[meta_option_flags $opt]
    if [regexp async $opt] {
	uplevel \#0 [list ::tmk::cmd_thread $obj {*}$EXECUTABLE -MDupdate \
		{*}$dep -c {*}$flags_prelink {*}$flags -o $obj $src]
    } else {
	uplevel \#0 [list cmd {*}$EXECUTABLE -MDupdate {*}$dep -c {*}$flags \
	    -o $obj $src]
    }
}


# only regenerate dependency information file, do not compile
config proc update_dependencies {obj src dep flags opt } {
    variable EXECUTABLE

    # delete old dependency information file
    if [file exists $dep] {file delete $dep}
    
    # 'update dependencies' command
	lappend flags {*}[meta_option_flags $opt]
    puts "updating dependencies for $obj"
    uplevel \#0 [list cmd_quiet {*}$EXECUTABLE -M -MDupdate {*}$dep \
	{*}$flags {*}$src]
    ### why no -o option? How does MIPSpro know which is the target???
}

# link a static lib
config proc link_lib {lib obj libspec flags opt} {
    variable EXECUTABLE

    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]
    set soloc [file dirname $lib]/so_locations
    uplevel \#0 [list cmd {*}$EXECUTABLE -Wl,-update_registry,$soloc \
	-o $lib {*}$flags -ar $obj {*}$libs]
    ### why not use libspec?
}

# link a shared lib
config proc link_shlib {lib obj export_obj libspec flags opt } {
    variable EXECUTABLE
    if {$export_obj ne {}} {
	log_msg "warning (mipspro): no support for interface subset export"
    }

    # needed?
    if [lcontains $opt soname] {
	lappend flags -soname [file tail $lib]
    }

    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]
    set soloc [file dirname $lib]/so_locations
    uplevel \#0 [list cmd {*}$EXECUTABLE -Wl,-update_registry,$soloc \
	-o $lib -shared -all {*}$flags {*}$obj {*}$libs]
}

# MIPSpro command for linking an executable
config proc link_exe {prog obj libspec flags opt} {
    variable EXECUTABLE
    lappend flags {*}[meta_option_flags $opt]
    set libs  [make_lib_options $libspec $opt]
    set soloc [file dirname $prog]/so_locations
    if [regexp async $opt] {
	uplevel \#0 [list ::tmk::cmd_thread $prog {*}$EXECUTABLE \
	    -Wl,-update_registry,$soloc -o $prog {*}$obj {*}$flags {*}$libs]
    } else {
	uplevel \#0 [list cmd {*}$EXECUTABLE -Wl,-update_registry,$soloc \
	    -o $prog {*}$obj {*}$flags {*}$libs]
    }
}

# generate all flags for linking libs with what we are generating
# recognized options:
# - rpath: store runtime linker paths in lib
# - circular: resolve circular inter-lib symbol dependencies 
# - twice: obsolete, should use "circular"
config proc make_lib_options {libspec opt_expr} {
	
    set paths {}
    set libs  {}

    # expand options expression, look for some of the options
    set opt [eval list $opt_expr]
    set circ [expr [lcontains $opt circular] || [lcontains $opt twice]]
    set rpath [lcontains $opt rpath]
    
    # process pairs (dir shortname)
    foreach lib [::link::libspec projlib_list $libspec] {

	
	set dir  [lindex $lib 0]
	set name [lindex $lib 1]
	if {![file isdirectory $dir]} {
	    exit_msg "directory $dir does not exist."
	}
	lappend paths -L$dir
	if $rpath {lappend paths -Wl,-rpath,$dir}
	lappend libs -l${name}
    }
    
    # lib path + sys libs
    foreach dir [::link::libspec libpath $libspec] {
	lappend paths -L$dir 
	if $rpath {lappend paths -Wl,-rpath,$dir}
    }
    foreach lib [::link::libspec syslibs $libspec] {
	lappend libs -l$lib
    }
    
    # resolve circular inter-lib dependencies?
    # well, we can't really do this, so we just put every lib twice
    if {$circ && ([llength $libs] > 1)} {
	return [list {*}$paths {*}$libs {*}$libs]
    } else {
	return [list {*}$paths {*}$libs]
    }
}
  
