# $Id: vc.tmk,v 1.15 2002/12/09 20:13:58 brabec Exp $
# configure Microsoft Visual C++ compilers 

# try to find product dir etc.
if $__UseRegistry {
    set commonDir ""
    set searchVC { 
	"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\DevStudio\\6.0\\Products\\Microsoft Visual C++" \
	    "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\DevStudio\\5.0\\Products\\Microsoft Visual C++" 
    }
    set productDir "" 
    foreach i $searchVC {
	if {![catch {set productDir [registry get "$i" "ProductDir" ]}]} {
	    break
	}
    }

    if { $productDir == "" } {
	set searchVNET { 
	    "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\7.0\\Setup\\VC" 
	}
    
	foreach i $searchVNET {
	    if {![catch {set productDir [registry get "$i" "ProductDir" ]}]} {
		break
	    }
	}
	if { $productDir != "" } {
	    set commonDir ""
	    catch { set commonDir [registry get "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\7.0" "InstallDir"] }
	}
	
	puts "got $productDir and $commonDir"
    }

 

    if { $productDir == "" } {
	exit_msg "cannot find Microsoft DevStudio 5.0/6.0"
    }
} else {
    if $__IsCygwinSystem {
	set searchPath [split $env(PATH) ":"]
        set productDir ""
	foreach i $searchPath {
	    if [file executable $i/cl.exe] {
		set productDir [exec cygpath -w [file dirname $i]]
	    }
	}
        if { $productDir == "" } {
	    set searchVC { 
		"/machine/software/microsoft/devstudio/6.0/products/microsoft visual c++" \
	    	"/machine/software/microsoft/devstudio/5.0/products/microsoft visual c++"
	    }
	    if { ! [catch { set productDir [exec regtool get [lindex $searchVC 0]/productdir]}]} {
		catch { set productDir [exec regtool get [lindex $searchVC 1]/productdir] }
	    }
	    if {! [file exists $productDir]} {
		log_msg "cannot find Microsoft VC++, please add to path ($productDir)"
		exit
	    }
        }
    } else {
	log_msg "cannot find Microsoft Visual C++, please add to search path (cl.exe)"
	exit
    }
}

config set DIR        $productDir
if { $commonDir != "" } {
   config set COMMON_DIR $commonDir
} else {
    config set COMMON_DIR [file join [file dirname $productDir] COMMON]
}
config set DEV_DIR    [file join $COMMON_DIR msdev98]
config set VC_DIR     [file join [file dirname $productDir] VC98]
if {[string match "NT*" $OSVER]} {
    config set OS_DIR "WINNT"
} else {
    config set OS_DIR "WIN95"
}


config set MAKEDEPEND [file nativename $::tmk::dir_arch/util/mkdep.exe]

config set WINPATH "${COMMON_DIR};${DEV_DIR}\\BIN;${COMMON_DIR}\\TOOLS\\${OS_DIR};${COMMON_DIR}\\TOOLS"
config set INCPATH "${DIR}\\PlatformSDK\\INCLUDE;${DIR}\\ATL\\INCLUDE;${DIR}\\INCLUDE;${DIR}\\MFC\\INCLUDE"
config set WINLIB     "${DIR}\\Lib;${DIR}\\PlatformSDK\\LIB;${VC_DIR}\\LIB;${VC_DIR}\\MFC\\LIB"
config set CONSOLE_FLAGS {  /D "WIN32" /D "_CONSOLE" /D "_MBCS" }
config set CONSOLE_LDFLAGS {kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib  kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /subsystem:console /incremental:yes /pdbtype:sept}

# the executable for both C and C++
config set EXECUTABLE "$DIR\\BIN\\CL.EXE"
if {![file exists $EXECUTABLE]} {
    exit_msg "cannot find $EXECUTABLE"
}


config set AR "$DIR\\BIN\\LIB.EXE"
if {![file exists $AR]} {
    exit_msg "cannot find $AR"
}

# default flags for g++ as well as for gcc
if { $__module == "cxx" } {
    config set FLAGS_PRF "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MDd /Zi /GXm"
    config set FLAGS_DBG "/D_INCTEMP /DHAVE_SSTREAM /nologo /MDd /GX /Z7 /Od /FD"
    config set FLAGS_STD "/D_INCTEMP /DHAVE_SSTREAM /nologo /MDd /GX /Z7 /Od /FD"
    config set FLAGS_OPT "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MD /O2 /GX"
    config set FLAGS_MAX "/D_INCTEMP /DHAVE_SSTREAM /nologo /EHsc /FD /W3 /MD /Ox /G6 /GL"
} else {
    config set FLAGS_PRF "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MDd /Zi /Gm"
    config set FLAGS_DBG "/D_INCTEMP /DHAVE_SSTREAM /nologo /MDd /GX /Z7 /Od /FD"
    config set FLAGS_STD "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MDd /ZI /O1 /Gm "
    config set FLAGS_OPT "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MD  /O2 "
    config set FLAGS_MAX "/D_INCTEMP /DHAVE_SSTREAM /nologo /FD /W3 /MD  /Ox /G6 /GL"
} 


# default flags if this compiler is used as the linker 
if [regexp "Vc7" $productDir] {

config set LDFLAGS_PRF "/fixed:no /nologo /NODEFAULTLIB:LIBC  "
config set LDFLAGS_DBG "/fixed:no /nologo /NODEFAULTLIB:LIBC /NODEFAULTLIB:MSVCRT /NODEFAULTLIB:LIBCD  /DEBUG"
config set LDFLAGS_STD "/nologo /NODEFAULTLIB:LIBC  "
config set LDFLAGS_OPT "/nologo /NODEFAULTLIB:LIBC  "
config set LDFLAGS_MAX "/nologo /LTCG /NODEFAULTLIB:LIBC /NODEFAULTLIB:LIBCD  "
} else {
config set LDFLAGS_PRF "/nologo /NODEFAULTLIB:LIBC /PDB:NONE "
config set LDFLAGS_DBG "/nologo /NODEFAULTLIB:LIBC /NODEFAULTLIB:LIBCD /PDB:NONE /DEBUG"
config set LDFLAGS_STD "/nologo /NODEFAULTLIB:LIBC /PDB:NONE "
config set LDFLAGS_OPT "/nologo /NODEFAULTLIB:LIBC /PDB:NONE "
config set LDFLAGS_MAX "/nologo /NODEFAULTLIB:LIBC /PDB:NONE "
}

# flags for some of the meta compiler options
config set METAOPT(nowarn)   ""
config set METAOPT(warn)     ""
config set METAOPT(fullwarn) ""
config set METAOPT(ansi)     ""
config set METAOPT(stl)      ""
config set METAOPT(shared)   ""

# with gcc we don't need an external makedepend
config set EXPLICIT_MAKEDEPEND 0

# return desired meta compiler options 
config proc meta_option_flags {opt} {
    variable METAOPT 
    set result {}
    foreach o $opt {
	if [info exists METAOPT($o)] {
	    dbg_msg "meta option $o: flags $METAOPT($o)" 2
	    set result [concat $result $METAOPT($o)]
	} else {
	    dbg_msg "no flags for meta option $o" 2
	}
    }
	
    return $result
}
config set genDependenciesProc {
    proc genDependencies { in_idb obj out absolutePath msstrings is_cxx } {
	set depout [open $out "w"]
	puts -nonewline $depout "[file tail $obj]: "
	
	set allStrings ""
	set allStrings [exec $msstrings $in_idb ]
	set allDeps    {}
	regsub -all \\\\ $allStrings / allStrings
	foreach i $allStrings {
	    set i [string trim $i]
	    set extension [file extension $i]
	    if { -1 != [lsearch { ".h" ".hh" ".cxx" ".cpp" ".c" ".c++" } [string tolower $extension]] } {
		if { ! [regexp /vc7 $i] && ! [regexp /vc98 $i] && ! [regexp /p\[a-zA-Z\]+c98 $i] } {
		    if [regexp "^/ipm/header" $i] {
			set i [string range $i 12 end]
		    }
		    if { [file pathtype $i] == "relative" } {
			set $i  $absolutePath/$i
		    }
		    if [file readable $i] {
			lappend allDeps $i
		    }
		}
	    }
	}
	# unique sort (we want *every* dependency only once)
	set allDeps [lsort \
		[foreach x $allDeps { set _x($x) 1}; array names _x]]
	catch { unset _x }
	puts $depout [join $allDeps " "]
	close $depout
    }
}

# convert some common flags to VC++ notation (e.g. -D -> /D)
config proc vc_flags {flags} {
    set result {}
    foreach flag $flags {
	switch -glob -- $flag {
	    "-D*" {append result " /D \{[string range $flag 2 end]\}"}
	    "-I*" {append result " /I \{[string range $flag 2 end]\}"}
	    "default" {lappend result $flag}
	}
    }
    regsub -all \@ $result \\\\\\\\ result
    return $result
}
# compile a source file (C or C++) 
config proc compile_obj {obj src dep flags opt} {
    global __IsCygwinSystem

    variable EXECUTABLE 
    variable CONSOLE_FLAGS
    variable genDependenciesProc
    if [regexp "async" $opt] {
	set async 1
    } else {
	set async 0
    }

    # convert filenames to native representation, and pay attention
    #   attention that no argument is evaluated too often ('\' problem)!
    set flags [concat $flags [meta_option_flags $opt]]
    if $async {
	set cmd [list [file nativename $EXECUTABLE]]
    } else {
	set cmd [list cmd [file nativename $EXECUTABLE]]
    }
    set cmd [concat $cmd $CONSOLE_FLAGS]
    set cmd [concat $cmd [vc_flags $flags]]
    if [regexp "cxx" [namespace current]] {
	set languageType /Tp
    } else { 
	set languageType /Tc
    }
    append cmd " /c $languageType$src /Fd[file rootname $obj].pdb /Fo$obj"

    if $async {
	set script "exec $cmd  >@stdout 2>@stderr <@stdin\n $genDependenciesProc \n genDependencies [file rootname $obj].idb $obj [file rootname $obj].dep [pwd] $::tmk::dir_arch/util/msstrings.exe [regexp "cxx" [namespace current]]"
	set th [::tmk::script_thread $obj $script]
    } else {
	uplevel \#0 $cmd
	eval $genDependenciesProc
	genDependencies [file rootname $obj].idb $obj [file rootname $obj].dep \
	    [pwd] $::tmk::dir_arch/util/msstrings.exe [regexp "cxx" [namespace current]]	
    }
}

# compile a source file (C or C++) 
config proc compile_obj_old {obj_out src_in dep_out flags opt} {
    global __IsCygwinSystem

    set all_threads {}
    foreach src $src_in {
	if { [llength $src_in] > 1 } {
	    set obj [filename_obj [file rootname $src]]
	} else {
	    set obj $obj_out
	}
	variable EXECUTABLE 
	variable CONSOLE_FLAGS

	# convert filenames to native representation, and pay attention
	#   attention that no argument is evaluated too often ('\' problem)!
	set flags [concat $flags [meta_option_flags $opt]]
	set cmd [list cmd_thread [file nativename $EXECUTABLE]]
	set cmd [concat $cmd $CONSOLE_FLAGS]
	set cmd [concat $cmd [vc_flags $flags]]
	if [regexp "cxx" [namespace current]] {
	    set languageType /Tp
	} else { 
	    set languageType /Tc
	}
	append cmd " /c $languageType$src /Fd[file rootname $obj].pdb /Fo$obj"
	set th [uplevel \#0 $cmd]
	puts "Thread $th : $src"
	lappend all_threads $th
    }
    puts "Joining threads..."
    foreach th $all_threads {
	if [thread::exists $th] {
	    thread::join $th
	}
    }
    puts "Done."
 

   # now we generate the dependecies by hand
    foreach src $src_in {
	if { [llength $src_in] > 1 } {
	    regsub ALL_OBJS_PARALLEL $dep_out [file rootname $src] dep
	    set obj [filename_obj [file rootname $src]]
	    puts $dep
	} else {
	    set dep $dep_out
	    set obj $obj_out
	}
	
	set is_cxx [regexp "cxx" [namespace current]]
	set depout [open [file rootname $obj].dep "w"]
	puts -nonewline $depout "[file tail $obj]: "
	set allStrings ""

	if $__IsCygwinSystem {
	    catch { set allStrings [exec strings [file rootname $obj].idb] }
	} else {
	    set allStrings [exec $::tmk::dir_arch/util/msstrings.exe [file rootname $obj].idb]
	}
	regsub -all \\\\ $allStrings / allStrings

	if $__IsCygwinSystem {
	    set absolutePath [exec cygpath -a -u [file dirname $src]]
	} else {
	    set absolutePath [pwd]
	}

	foreach i $allStrings {
	    set i [string trim $i]
	    set extension [file extension $i]
	    if { -1 != [lsearch { ".h" ".hh" ".cxx" ".cpp" ".c" ".c++" } [string tolower $extension]] } {
		if { ! [regexp /vc98 $i] && ! [regexp /p\[a-zA-Z\]+c98 $i] } {
		    if [regexp "^/ipm/header" $i] {
			set i [string range $i 12 end]
		    }
		    if { [file pathtype $i] == "relative" } {
			set $i  $absolutePath/$i
		    }
		    if [file readable $i] {
			lappend allDeps $i
		    } 
		}
	    }
	}
	# unique sort (we want *every* dependency only once
	set allDeps [lsort \
			 [foreach x $allDeps { set _x($x) 1}; array names _x]]
	catch { unset _x }
	puts $depout [join $allDeps " "]
	close $depout
    }
}

# only update dependency file, but do not compile
config proc update_dependencies {obj src dep flags opt} {
    global __VC_nodepend 
    if { ! [info exists __VC_nodepend] } {
	set __VC_nodepend 1
	log_msg "explicit dendencies update not supported for VC++"
    }
}

# link a static lib
config proc link_lib {lib obj libspec flags opt} {
    variable AR
    # hack: flags are just not passed to AR at all
    set flags [concat $flags [meta_option_flags $opt]]
#    set libs  [make_lib_options $libspec $opt]
    set cmd [list "cmd" [file nativename $AR] /nologo /OUT:$lib]
    set cmd [concat $cmd $obj]
    uplevel \#0 $cmd
    ### use libspec?
}

# link a shared lib
config proc link_shlib {lib obj export_obj libspec flags opt} {
    variable EXECUTABLE
    if {$export_obj != {}} {
	log_msg "warning (gcc): no support for interface subset export"
    }
    # needed?
    if [lcontains $opt "soname"] {
	lappend flags "-Wl,-soname=[file tail $lib]"
    }
    set flags [concat $flags [meta_option_flags $opt]]
    set libs  [make_lib_options $libspec $opt]
    set cmd [list "cmd" [file nativename $EXECUTABLE] "-shared"]
    set cmd [concat $cmd $flags [list "-o" $lib] $obj $libs]
    uplevel \#0 $cmd
}

# link an executable
config proc link_exe {prog obj libspec flags opt} {

    set flags [concat $flags [meta_option_flags $opt]]
    set flags [concat $flags [make_lib_options $libspec $opt]]

    variable EXECUTABLE
    set cmd [concat [list cmd [file nativename $EXECUTABLE]]]
    regsub -all \\\\ $prog \/ prog
    set cmd [concat $cmd $obj "/Fe$prog"]
    set cmd [concat $cmd "/link" $flags ]
    
    regsub -all \@ $cmd \\\\\\\\ cmd
    uplevel \#0 $cmd 

}

# generate all flags for linking libs with what we are generating.
# recognized options:
# - circular: resolve circular inter-lib symbol dependencies 
# - twice: obsolete, should use "circular"
config proc make_lib_options {libspec opt_expr} {

    set paths {}
    set libs  {}
    
    # expand options expression, look for some of the options
    eval set opt \[list $opt_expr\]
    set circ [expr [lcontains $opt "circular"] || [lcontains $opt "twice"]]
    set rpath [lcontains $opt "rpath"]

    # process pairs (dir shortname)
    foreach lib [::link::libspec projlib_list $libspec] {
	
	set dir  [lindex $lib 0]
	set name [lindex $lib 1]
	if {![file isdirectory $dir]} {
	    exit_msg "directory $dir does not exist."
	}
	append paths " /LIBPATH:$dir"
	append libs  " [filename_lib $name]"
    }
    
    # lib path + sys libs
    foreach dir [::link::libspec libpath $libspec] {
	append paths " /LIBPATH:$dir"
    }
    foreach lib [::link::libspec syslibs $libspec] {
	append libs " [filename_lib $lib]"
    }
    
    # resolve circular inter-lib dependencies?
    # well, we can't really do this, so we just put every lib twice
    if {$circ && ([llength $libs] > 1)} {
	return [concat $paths $libs $libs]
    } else {
	return [concat $paths $libs]
    }
}

# this is called initially from the language module
config proc init {} {
    global cxx::vc::IS_INITIALIZED 
    global ::env
    global __IsCygwinSystem
    variable WINPATH
    variable INCPATH
 
    set ::env(MSDevDir) ${::cxx::vc::COMMON_DIR}
    set ::env(MSVCDir)  ${::cxx::vc::VC_DIR}
    
    if $__IsCygwinSystem {
	regsub -all \(\[A-Z\]\)\: ${::cxx::vc::WINPATH} /cygdrive/\\1 tmp
	regsub -all \\\\ $tmp / tmp
	regsub -all \; $tmp \: tmp
	set ::env(PATH) "$env(PATH):$tmp"
    } else {
	set ::env(PATH) "$env(PATH);${::cxx::vc::WINPATH}"
    }	

    set ::env(INCLUDE) ${::cxx::vc::INCPATH}
    set ::env(LIB)  ${cxx::vc::WINLIB}
}

    

