# ===========================================================================
# dump system information using 'xmkmf' 
# ===========================================================================

# currently out of order
dbg_msg "xmkmf.tmk skipped - currently out of order"
return

# this function tries to dump system information
# using xmkmf/imake , which is installed on nearly all (?) X11 machines
# on success, the array 'arrayname' holds a number of (key,value) pairs.
# example:
# tclsh> dumpSystemInformation_XMKMF xyz
# tclsh> puts $xyz(XTOOLLIB) 
#  -lXt -lSM -lICE
# tclsh> puts $xyz(YACC)
#  bison -y
proc dumpSystemInformation_XMKMF {arrayname} {
    upvar \#0 $arrayname allvars
    global TMPDIR

    
    if [catch {set xmkmfbin [exec which xmkmf]}] {
	__Dbg "no 'xmkmf' found (non-X11 system ?)"
	puts $xmkmfbin
	return 0
    }

    if [catch {set mypid [exec sh -c "echo $$"]}] {
	set mypid ___
    }
    set prefix XMKMF${mypid}_
    set prefix_len [string length $prefix]

    set tmpdir ${TMPDIR}/.::tmk::_xmkmf_$mypid

    # create dir in /tmp to dump output 
    catch {exec rm -fr $tmpdir}
    if [catch {exec mkdir $tmpdir}] {
	__Dbg "cannot create tmpdir $tmpdir"
	return 0
    }
    set outf [open $tmpdir/config.tcl w]
    set vars [genConfigFile_XMKMF $prefix $outf $tmpdir]
    close $outf
    if {[llength $vars] == 0} {
	catch {exec rm -fr $tmpdir}
	return 0
    } 
 
    source $tmpdir/config.tcl
    catch {exec rm -fr $tmpdir}

    # filter out 'unset' or 'duplicated' vars...
    set pre {}
    foreach var $vars {
	if {$var ne $pre} {
	    set pre $var
	    eval set val $$var
	    if {$val ne {}} {
		set allvars([string range $var $prefix_len end]) $val
	    }
	}
    }
    return 1
}



# prefix: the leading part for every variable generated
#         e.g. if prefix is 'MK_' we get names like 'MK_CC'
# out:    out-file (descriptor, not name)
# tmpdir: tmp-dir used for 'xmkmf' (e.g. /usr/tmp or $ARCH/)
proc genConfigFile_XMKMF {prefix out tmpdir} {
    
    set allvars {}

    if [catch {exec touch $tmpdir/Imakefile}] {
	__Dbg "cannot create Imakefile in $tmpdir"
	return {}
    }

    set shcmd "(cd $tmpdir ; [exec which xmkmf] )"
    catch {exec sh -c $shcmd}

    if {[catch {set mf [exec cat $tmpdir/Makefile ]}]} {
	__Dbg "missing xmkmf output (failed)"
	return {}
    }

    # process each line separately 
    set txt [split $mf \n]
    # join lines separeted by '\'
    set newtxt {}
    set actline {}
    foreach line $txt {
	set l [expr [string length $line] - 1]
	set c [string range $line $l end]
	if {$c == \\} {
	    set actline "$actline [string range $line 0 [expr $l - 1]]"
	} else {
	    append actline $line
	    lappend newtxt $actline
	    set actline {}
	}
    }
    set mf [join $newtxt \n]

    # strip comments...
    regsub -all ^# $mf {} mf
    puts $out "set _${prefix}unknownVar -2"
    puts $out "set _${prefix}knownVar -2"
    puts $out "set _${prefix}unknownVar_Old -1"
    puts $out "set _${prefix}knownVar_Old -1"

    puts $out "while {(\$_${prefix}unknownVar ne \$_${prefix}unknownVar_Old) || (\$_${prefix}knownVar ne \$_${prefix}knownVar_Old)} {"
    puts $out "  set _${prefix}unknownVar_Old \$_${prefix}unknownVar"
    puts $out "  set _${prefix}knownVar_Old \$_${prefix}knownVar"
    puts $out "  set _${prefix}unknownVar 0"
    puts $out "  set _${prefix}knownVar 0"

    regsub -all {\\\n} $mf { } mf
    set mf [split $mf \n]

    foreach i $mf {
	if {[regexp {[A-Z]+ = .*} $i j]} {
	    # reduce whitespace
	    regsub -all {[ 	\n]+} $j { } j
	    regsub -all {^[ ]+} $j {} j
	    # regsub -all {=[ ]+} $j {} j
	    set d [split $j =]
	    if {[llength $d] == 2} {
		set lvalue [lindex $d 0]
		set rvalue [lindex $d 1]
		
		regsub -all {^[ ]+} $lvalue {} lvalue
		regsub -all {[ ]+$} $lvalue {} lvalue
		regsub -all {^[ ]+} $rvalue {} rvalue
		regsub -all {[ ]+$} $rvalue {} rvalue
		regsub -all {\$\$([A-Z0-9_]+)} $rvalue {$(\1)} rvalue
		
		set varRefs [extractVars_XMKMF $rvalue]
		foreach v $varRefs {
		    puts $out "  if {!\[info exists ${prefix}$v\]} {"
		    puts $out "      incr _${prefix}unknownVar"
		    puts $out "      set ${prefix}$v \"\" } else {"
		    puts $out "      incr _${prefix}knownVar }"
		}
		regsub -all {\$\(} $rvalue "$\{${prefix}" rvalue

		regsub -all {\)}   $rvalue "\}" rvalue
		
		puts $out "  set ${prefix}$lvalue \"$rvalue\""
		lappend allvars "${prefix}$lvalue"
		
		if {[llength $varRefs] > 1} {
		    puts $out "  regsub -all \"^\\\[ \\\]+\" \$${prefix}$lvalue \"\" ${prefix}$lvalue"
		    puts $out "  regsub -all \"\\\[ \\\]+\" \$${prefix}$lvalue \" \" ${prefix}$lvalue"
		}
	    }
	}
    }

    puts $out }
    return [lsort $allvars]
}

# extract variables: 
# ------------------
# if 'str' is something like "$(INCLUDES) $(TOP_INCLUDES)"
# the result will (or should :-) be a tcl-list like 
# { INCLUDES TOP_INCLUDES }
proc extractVars_XMKMF str {

    if [regexp {\$\(([A-Z0-9_]+)\)} $str m] {
	regsub {\$\(([A-Z0-9_]+)\)} $str {} str
	regsub {\$\(} $m {} m
	regsub {\)} $m {} m
	return [list {*}[extractVars_XMKMF $str] $m]
    } else {
	if [regexp {\$([A-Z0-9_]+)} $str m] {
	    regsub  {\$([A-Z0-9_]+)} $str {} str
	    set m [string range $m 1 end]
	    if {$m ne {}} {
		return [list {*}[extractVars_XMKMF $str] $m]
	    }
	}
    }
    return {}
}


proc getValueFromKey {array_name key} {
    upvar \#0 $array_name an
    set val {}
    catch {set val $an($key)}
    return $val
}

proc dumpArray {array_name} {
    upvar \#0 $array_name an
    set names [array names an]
    puts ...
    foreach i $names {
	set val [getValueFromKey $array_name $i]
	puts "$i = $val"
    }
}

set res [dumpSystemInformation_XMKMF xmkmf_array]]

if {$res == 0} {
    __Dbg "config: 'xmkmf.tmk' failed !"
} else {

    set xvars {PROJECTROOT YACC MV TROFF GZIPCMD INSTALL RM
	    LATEX NROFF TAGS LINT MAKE LEX DVIPS DEPEND CXXFILT LN }
    
    foreach i $xvars {
	set tmp [getValueFromKey xmkmf_array $i]
	if {$tmp ne {}} {
	    addAndSet $i $tmp
	}
    }
}


	

