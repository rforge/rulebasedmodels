# ===========================================================================
# $Id: windows.tmk,v 1.11 2001/11/22 12:47:49 brabec Exp $
# windows/cygwin configuration
# ===========================================================================
# $Log: windows.tmk,v $
# Revision 1.11  2001/11/22 12:47:49  brabec
# blablub VisualC++ changes
#
# Revision 1.10  2001/10/29 22:15:11  brabec
# ready for Windows2000 and VisualC++
#
# Revision 1.9  2001/05/18 09:58:46  brabec
# *** empty log message ***
#
# Revision 1.8  2001/05/09 13:32:06  brabec
# fixed cpu handling for linux
#
# Revision 1.7  2001/05/09 13:18:43  brabec
# correct cpu names
#
# Revision 1.6  2001/05/09 11:51:53  brabec
# *** empty log message ***
#
# Revision 1.5  2001/05/09 11:47:16  brabec
# fixed for WindowsME
#
# Revision 1.4  2001/04/24 10:24:43  brabec
# cygwin/vc port
#
# Revision 1.3  2000/10/12 07:24:10  htschirm
# adapted to Win NT4.0
#
# Revision 1.2  2000/08/10 15:05:43  htschirm
# Windows/cygwin port
#
# Revision 1.1  2000/08/01 14:45:51  htschirm
# new config tree structure
#
# ===========================================================================

# default - will be refined later 
set ::NRCPUS  1
set ::CPUFREQ <unknown>

# cygwin has very different file name conventions, so we need to overload
#   some Tcl 'file' subcommands
if $__IsCygwinSystem {

    # dispatch file commands to Tcl 'file' if there is no tmk implementation
    rename file ::tmk::tcl_file_cmd
    proc ::file args {
	set cmd [lindex $args 0]
	if {[info commands ::tmk::file__$cmd] != {}} {
	    return [eval ::tmk::file__$cmd [lrange $args 1 end]]
	} else {
	    return [eval ::tmk::tcl_file_cmd $args]
	}
    }

    # file pathtype: needs to handle //c, c:, and /cygdrive/c
    proc ::tmk::dummy_file__pathtype {path} {
	switch -glob $path {
	    {//[a-zA-Z]*} {return absolute}
	    {[a-zA-Z]:/*} {return absolute}
	    {/cygdrive/[a-z][A-Z]} {return absolute}
	    /* {return volumerelative}
	    default {return relative}
	}
    }

    # the native name should somehow replace all '/' by '\\'
    proc ::tmk::dummy_file__nativename {name} {
	switch -exact $::OSCLASS {
	    $::STR_WINDOWS {
		regsub -all {/} $name {\\} name
		return $name
	    } 
	    $STR_UNIX {return $name}
	    default {return $name}
	}
    }
} else {
    
    proc ::tmk::file__delete {args} {
	set tmp_args {}
	foreach i $args {
	    if [regexp ^\- $i] {
		continue;
	    }
	    if [file exists $i] {
		if [file isdirectory $i] {
		    regsub -all / $i \\ itmp
		    exec cmd {*}[list /C RMDIR /S /Q $itmp]
		} else {
		    regsub -all / $i \\ itmp
		    lappend tmp_args $itmp
		}
	    }
	}
	if [llength $tmp_args] {
	    set tmp_args [join $tmp_args { }]
	    exec cmd [list /C del /Q $tmp_args]
	}
    }
    
    # dispatch file commands to Tcl 'file' if there is no tmk implementation
    rename file ::tmk::tcl_file_cmd
    proc ::file args {
	set cmd [lindex $args 0]
	if {[info commands ::tmk::file__$cmd] != {}} {
	    return [eval ::tmk::file__$cmd [lrange $args 1 end]]
	} else {
	    return [eval ::tmk::tcl_file_cmd $args]
	}
    }
}

if $__IsCygwinSystem {
    ::tmk::arch_cygwin
} else {

    # =====================================
    # normal windows setup - using registry 
    # =====================================

    if [catch {package require registry}] {
	exit_msg "missing Tcl package 'registry' (please use a newer version of tclsh) !"
    }

    set key {HKEY_LOCAL_MACHINE\\System\\CurrentControlSet}

    set __hostNameKeys [list \
	    "${key}\\\\Control\\\\ComputerName\\\\ActiveComputerName ComputerName"  \
	    "${key}\\\\Services\\\\VxD\\\\MSTCP HostName" \
	    "${key}\\\\Control ComputerName"  \
	    "${key}\\\\Control\\\\ComputerName ComputerName"  \
	    "${key}\\\\Control\\\\ComputerName\\\\ComputerName ComputerName"  \
	    "${key}\\\\Services\\\\VxD\\\\VNETSUP ComputerName" ]
 	
 
    # try to figure out the name of this machine
    set ::HOST unknown
    foreach i $__hostNameKeys {
	set key [lindex $i 0]
	set val [lindex $i 1]
	
	if {![catch {set ::HOST [string tolower [registry get $key $val]]}]} {
	    break
	}
    }
 
    set key {HKEY_LOCAL_MACHINE\\System\\CurrentControlSet}
    set __domainNameKeys [list \
	    "${key}\\\\Services\\\\Tcpip\\\\Parameters Domain" \
	    "${key}\\\\Services\\\\VxD\\\\MSTCP Domain" ]
    # get domainname 
    set ::DOMAIN localdomain
    foreach i $__domainNameKeys {
	set key [lindex $i 0]
	set val [lindex $i 1]
	if {![catch {set ::DOMAIN [string tolower [registry get $key $val]]}]} {
	    break
	}
    }

    # get CPU info
    set __cpuCentralKey "HKEY_LOCAL_MACHINE\\Hardware\\Description\\System\\CentralProcessor"
    set __cpuKeys [registry keys $__cpuCentralKey]

    # get first CPU (multi-processor stuff not yet implemented)
    set __cpu unknowncpu
    if {[llength $__cpuKeys] > 0} {
	set __cpuName [string tolower \
			   [registry get $__cpuCentralKey\\[lindex $__cpuKeys 0] Identifier]]
	
	switch -regexp $__cpuName {
	    {.*family 6.*}      {set ::CPU pentium3}
	    {.*pentium.*III .*} {set ::CPU pentium3}
	    {.*pentium.*II .*}  {set ::CPU pentium2}
	    {.*pentium.*}       {set ::CPU pentium}
	    {.*amd.*athlon.*}   {set ::CPU athlon}
	    default             {set ::CPU ix86}
	} 

    }
    
    set ::VENDOR pc

    # get OS info
    set key HKEY_LOCAL_MACHINE\\Software\\Microsoft
    set ntkeys {}
    catch {set ntkeys [registry keys "$key\\Windows NT"]} 
    if {$ntkeys != {}} {
	set key HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion
	set __windowsVersion NT[registry get $key CurrentVersion]
    } else {
	set key HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion
	set __windowsVersion [registry get $key Version] 
    }

    switch $::OS {
	$::STR_CYGWIN {
	    ::tmk::osvers_posix
	}
	$::STR_WINDOWS {
	    switch -glob $__windowsVersion {
		*98 {set ::OSVER 98} 
		*95 {set ::OSVER 95} 
		NT5* {set ::OSVER 2K}
		NT* {set ::OSVER $__windowsVersion} 
		default {set ::OSVER unknown}
	    }
	}
    }
} 

