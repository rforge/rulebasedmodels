# ========================================================================
# $Id: replace.tmk,v 1.6 2000/07/20 16:15:57 htschirm Exp $
# ========================================================================
# module for replacing strings in all project subdirectories
# is also able to revert the last changes
# ========================================================================
# $Log#
# ========================================================================


set_ifndef ::REPLACE_LIST  {}
set_ifndef ::REPLACE_FILES {}
set_ifndef ::REPLACE_VERBOSE 0

# set the default dir / file where replacements are backed up / logged
eval_later {
    # evaluate this when we're in the subdirectory, not now!
    set fname $SUBDIR
    regsub -all / $fname _ fname
    set_ifndef ::REPLACE_BACKUP_DIR /tmp/tmk-replace-backup/$fname
    set_ifndef ::REPLACE_FILE_LOG   $::REPLACE_BACKUP_DIR/replace-log
}

# ===========================================================================
# targets (simply call the procedures)
# ===========================================================================

# the target which has to be called in order to replace the specified things
target replace ALWAYS_BUILD {
    replace_in_files $REPLACE_FILES $REPLACE_LIST
}

# the target which has to be called in order to revert the last replacements
target revert-replace ALWAYS_BUILD {
    revert_replace
}

# also clean the temporary files used for backup/recovery of the replacements
depend clean clean-replace
target clean-replace ALWAYS_BUILD {
    file delete -force -- $REPLACE_BACKUP_DIR
}

# ===========================================================================
# procedures (doing the actual work)
# ===========================================================================

# specify an expression and its substitute to be replaced
proc ::replace {expr subst} {
    global REPLACE_LIST
    lappend REPLACE_LIST [list $expr $subst]
}

# backup files and replace specified expressions; also log changed files
proc ::replace_in_files {file_pat subst_list} {

    global REPLACE_FILE_LOG REPLACE_BACKUP_DIR REPLACE_VERBOSE
    if {![file isdirectory $REPLACE_BACKUP_DIR]} {
	echo file mkdir $REPLACE_BACKUP_DIR
    }
    file delete -force -- $REPLACE_FILE_LOG

    set files [lmap $file_pat {[glob -nocomplain $ITEM]}]

    # for all files
    foreach f $files {
	if [llength $f] {

	    puts -nonewline stderr "file $f ... "
	    set changed 0
	    set txt [exec cat $f]

	    # for all substitution expressions
	    foreach e $subst_list {

		set srch [lindex $e 0]
		set repl [lindex $e 1]
		
		if [regsub -all $srch $txt $repl txt] {
		    set changed 1
		}

	    }
	
	    # backup and write file?
	    if $changed {
		
		puts stderr "backup & change."
		exec echo $f >> $REPLACE_FILE_LOG
		set fold $REPLACE_BACKUP_DIR/[file tail $f]
		exec cp -f $f $fold
		set o [open $f w]
		puts $o $txt
		close $o

		if $REPLACE_VERBOSE {
		    catch "exec diff $fold $f >@stderr 2>@stderr" msg
		}

	    } else {

		puts stderr "unchanged."

	    }

	}
    } ;# for all files

}

# revert all files that have been modified by the last replace_in_files
proc ::revert_replace {} {

    global REPLACE_BACKUP_DIR REPLACE_FILE_LOG

    if [catch "exec cat $REPLACE_FILE_LOG" log] {
	exit_msg "no file $REPLACE_FILE_LOG in $SUBDIR"
    }

    set files [split $log \n]
    foreach f $files {
	puts stderr "recovering $f"
	exec cp -f $REPLACE_BACKUP_DIR/[file tail $f] $f
    }

}

# ===========================================================================
# specialized replacement operations (e.g. for header files, class names)
# ===========================================================================

# replace header file names in include statements
proc ::replace_include {oldfile newfile} {

    set old "#include(\[ \t\n\]+\[<\"\])${oldfile}(\[>\"\])"
    set new "#include\\1$newfile\\2"
    replace $old $new

}

# replace names of template things (e.g. vector<> -> myVector<>)
proc ::replace_classnameT {oldname newname} {

    set old "(\[-\(\)\{,;=+*%!^|/?><~ \t\n\])${oldname}(\[ \t\n\]*)<"
    set new "\\1$newname\\2<"
    replace $old $new
}

# replace names of non-template things (e.g. string -> std::string)
proc ::replace_classname {oldname newname} {

    # must prevent to replace include file names rather than class names!
    # like this, in "xxx <CLASSNAME>" CLASSNAME will not be replaced,
    # as opposed to "xxx<CLASSNAME>" or "xxx< CLASSNAME >"

    set old1 "(\[^ \t\n\]<)${oldname}(\[\(\)\}&> \t\n\])"
    set old2 "(\[-\{,;=+*%!^|/?>~ \t\n\])${oldname}(\[\(\)\}&> \t\n\])"
    set new  "\\1${newname}\\2"
    replace $old1 $new
    replace $old2 $new
}
