# -*-Mode: tcl -*-
# ============================================================================
# $Id: doxygen.tmk,v 1.12 2005/04/23 20:53:58 yamauchih Exp $
# tmk module for generating project documentation with doxygen
# ============================================================================
# $Log: doxygen.tmk,v $
# Revision 1.12  2005/04/23 20:53:58  yamauchih
# add runmode to build 64bit executables
#
# Revision 1.11  2005/04/12 10:42:14  yamauchih
# add DOXYGEN_VERSION
#
# Revision 1.10  2000/08/06 23:22:31  ag4-adm
# *** empty log message ***
#
# Revision 1.9  2000/08/06 23:20:07  ag4-adm
# *** empty log message ***
#
# Revision 1.8  2000/08/06 22:57:34  ag4-adm
# fixed namespaces
#
# Revision 1.7  2000/08/02 12:24:40  web-tmk
# *** empty log message ***
#
# Revision 1.6  2000/04/20 11:38:00  htschirm
# lots of new names
#
# Revision 1.5  1999/09/28 07:39:07  brabec
# config DOXYGEN (find binary and skip module if not installed)
#
# Revision 1.4  1999/09/24 07:42:08  htschirm
# Name change.
#
# Revision 1.3  1999/05/31 20:45:42  htschirm
# Fixed modules and sync'd them with the documentation.
#
# Revision 1.2  1999/05/31 14:06:57  htschirm
# Many changes. E.g. lib handling, -force, ...
#
# Revision 1.1  1999/05/05 08:49:33  ag4-adm
# Initial doxygen support version.
#
# ============================================================================

# for doxygen module 
namespace eval ::doxygen {}

# for doxygen config file 
namespace eval ::dxx {}

# module version
# set ::doxygen::version "$Revision: 1.12 $"

# if not specified otherwise, use doxygen executable in the search path
ifdef ::doxygen::DOXYGEN {} {
    catch {variable DOXYGEN [exec which doxygen]}
}

# is doxygen really installed ?
if {![file executable $DOXYGEN]} {
    exit_msg "doxygen not configured, please set doxygen::DOXYGEN accordingly"
}

if {![info exists ARCH]} {
    exit_msg "doxygen support requires use of \$USE_ARCH / \$ARCH"
}

# default settings: create documentation for this project only
# config file generated by Doxygen
set_ifndef DOXYFILE  [targetname_long doxyfile.final]

# modified final configuration file for Doxygen
set_ifndef DOXYFILE_INPUT [targetname_long doxyfile.input]

# default values for some doxygen variables
#   you can set any doxygen variable this way, just call it dxx::...
set_ifndef ::dxx::PROJECT_NAME     "[file tail $PROJDIR]"
set_ifndef ::dxx::INPUT            "$PROJDIR"
set_ifndef ::dxx::FILE_PATTERNS    "*.h *.hh *.H *.h++ *.hpp *.hxx *.doxy"
set_ifndef ::dxx::OUTPUT_DIRECTORY "$ARCH"
set_ifndef ::dxx::HTML_OUTPUT      "html" 
set_ifndef ::dxx::LATEX_OUTPUT     "latex" 
set_ifndef ::dxx::MAN_OUTPUT       "man" 
set_ifndef ::dxx::STRIP_FROM_PATH  "$PROJDIR"
set_ifndef ::dxx::CASE_SENSE_NAMES "YES"
set_ifndef ::dxx::RECURSIVE        "YES"
set_ifndef ::dxx::GENERATE_HTML    "YES"
set_ifndef ::dxx::GENERATE_LATEX   "YES"
set_ifndef ::dxx::GENERATE_MAN     "YES"

# set next in config 
#     DOXYGEN_VERSION if "accept_version then run [doxygen --version]"
#     
set_ifndef ::doxygen::DOXYGEN_VERSION  "unknown"
if { $::doxygen::DOXYGEN_VERSION == "accept_version"} {
    set ::doxygen::DOXYGEN_VERSION "[ exec doxygen --version ]"
}

# generate the doxygen config file
eval_later {
    
    # config depends on the TMakefile (where the real config is put)
    target $DOXYFILE_INPUT TMakefile {
	
	log_msg "generating new config file $TARGET ..."
	catch "exec $doxygen::DOXYGEN -g $TARGET" msg
	if {![file exists $TARGET]} {
	    exit_msg "could not create doxygen config file:\n$msg"
	}
    }
}


# generate a final doxyfile and substitute the dxx:: variables
eval_later {
    
    # the user may specify doxygen variable to be set by using the
    #   variable name prefix dxx::
    # this list contains all Doxygen vars that we will configure
    variable DOXYVARS [info vars ::dxx::*]
    set DOXYVARS [lmap $DOXYVARS {[namespace tail $ITEM]}]
    
    target $DOXYFILE "$DOXYFILE_INPUT TMakefile" {
	
	# read the doxygen config file
	set infile [lindex $SRC 0]
	set defs [split [exec cat $infile] "\n"]
	
	# loop over all dxx:: variables
	foreach var $doxygen::DOXYVARS {
	    
	    # the variable name for Doxygen
	    eval set val "\$::dxx::$var"
	    log_msg "doxygen: setting $var = \"$val\""
	    
	    # try to replace its definition in the first line it appears in
	    set found 0
	    set linenb 0
	    foreach line $defs {
		
		# try to replace definition
		if { [regsub "$var \[ \]*=.*\$" $line "$var = $val" line] } {
		    
		    # replace the line
		    set defs [lreplace $defs $linenb $linenb $line]
		    
		    set found 1
		    break
		}		
		
		incr linenb
	    }
	    
	    if { ! $found } {
		exit_msg "definition of doxyvar $var not found in $infile."
	    }
	}
	
	# write resulting config file
	log_msg "writing $doxygen::DOXYFILE"
	set f [open $doxygen::DOXYFILE w]
	foreach line $defs {
	    puts $f $line
	}
	close $f
    }
}

# make sure to create an up-to-date $DOXYFILE 
eval_later {
    assert {[info exists DOXYFILE]}
    target config $DOXYFILE {}
}

# generate the complete documentation
target doc config {  
    cmd $doxygen::DOXYGEN $doxygen::DOXYFILE 
    log_msg "doxymentation (html,latex,man) created."
}

# generate the LaTeX documentation only; and generate PS file
target ps doc { 
    
    # generate dvi and ps file from LaTeX
    if [file isdirectory $ARCH/latex] {
	set olddir [pwd]
	cd $ARCH/latex
	cmd make refman.ps
	cd $olddir
    }
    log_msg "doxymentation (latex/PS) created."
}

# default target: build complete documentation, but not the Postscript version
build doc
