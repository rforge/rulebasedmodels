# -*-Mode: tcl -*-
# =============================================================================
# latex2html.tmk: tmk module for latex2html compilation based on latex.tmk
# Copyright (C) 2005 by Yamauchi Hitoshi
# =============================================================================
# $Id: latex2html.tmk,v 1.1 2005/07/25 20:40:07 yamauchih Exp $
# =============================================================================

# for doxygen module 
namespace eval ::latex2html {}

# should be empty on default
set_ifndef ::latex2html::EXCLUDE           {}
set_ifndef ::latex2html::LATEX2HTMLFLAGS   ""

# executables
set_ifndef ::latex2html::LATEX2HTML [exec which latex2html]

#
# check if file is a "main" file containing a document
# This proc comes from latex.tmk
#
proc LaTeXisMain { file } {
    set exp "\\\\begin\[ \t\n\]*\{\[ \t\n\]*document\[ \t\n\]*\}"
    set txt [exec cat $file]
    return [regexp $exp $txt]
}

#
# for an expression <A><B>{<C>}<D>, extract [string trim <C>] 
#   and return <D> in $restname. 
# This proc comes from latex.tmk
#
proc getStringInBraces { txt B restname } {

    set findexp "${B}\[ \t\n\]*{\(\[^\}\]*\)}"
    upvar $restname rest
    
    set p [regexp -- $findexp $txt match name]
    if { $p == 1 } {
	# forget everything before the found text
	set q [string first $match $txt]
	set l [string length $match]
	assert {$q != -1}
	set rest [string range $rest [expr $q + $l] end]
	return [string trim $name]
    } else {
	# not found: no rest, no name
	set rest ""
	return ""
    }
}

#
# make dependencies by scanning for \input and \usepackage
# This proc comes from latex.tmk
#
proc latexMakeDepend { tex } {

    # TEXINPUTS are inferred from $env(TEXINPUTS)
    if {![info exists TEXINPUTS]} {
	if [info exists env(TEXINPUTS)] {
	    set TEXINPUTS [split $env(TEXINPUTS) ":"]
	} else {
	    set TEXINPUTS "."
	}
    }
    assert {[info exists TEXINPUTS]}
    
    if { ![file readable $tex] } {
	dbg_msg "could not read file $tex for dependencies."
	return
    }

    # read file into line list
    set txt [split [exec cat $tex] "\n"]
    set files [list]
    
    # remove comments
    set rest ""
    foreach line $txt {
	set p [string first "%" $line]
	if { $p != -1 } {
		set line [string range $line 0 [expr $p - 1]]
	}
	lappend rest $line
    }
    
    # look for all \input{} directives
    set names "x"
    while {[llength $names]} {
	set namel [getStringInBraces $rest "\\\\input" rest]
	set names [split $namel ","]
	foreach name $names {
	    # search in TEXINPUTS path for the dependency file
	    set firstfound [lindex [find_in_pathlist ${name}.tex ${TEXINPUTS} ] 0]
	    eval lappend files $firstfound
	} 
	set names [split [getStringInBraces $rest "\\\\include" rest] ","]
    }

    set files [lmap $files {[normalize_filevar ITEM]}]
    return $files
}

#
# detect source files
#
set TEXFILES [glob -nocomplain *.tex]

#
# get the main latex file (not included one)
#
set ::latex2html::MAINFILES [lfilter $TEXFILES {[LaTeXisMain $ITEM]}]

#
# don't forget inputed TeX files
#
foreach texfile $::latex2html::MAINFILES {    
    # get all dependency files with path names
    set depfiles [latexMakeDepend $texfile]
    # all .tex are "normal" dependencies
    set dependsrcs [lfilter $depfiles \
			{[string compare [file extension $ITEM] .tex] == 0}]

    set htmldir [file rootname $texfile]
    depend $htmldir $dependsrcs
    dbg_msg "$dependsrcs is updated and $texfile depends on $dependsrcs"
}

foreach tex $::latex2html::MAINFILES {
    set htmldir [ file rootname $tex ] 
    target $htmldir $tex {

	# Next eval is because of stupid tcl limitation. I do not like
	# this kind of ``not real'' programming language part. Strings
	# with space automatically becomes a list and it seems no way
	# to eval only once.  so, cmd ${::latex2html::LATEX2HTML}
	# ${::latex2html::LATEX2HTMLFLAGS} $SRC with
	# ::latex2html::LATEX2HTMLFLAGS = "-split 3" does not work.
	# If it is a list and try to get car with lindex, then lindex
	# argument is magically once evaluated. So, using eval's side
	# effect, (evlis effect), this is avoided.

	eval cmd [list ${::latex2html::LATEX2HTML} ] ${::latex2html::LATEX2HTMLFLAGS} [list $SRC]
    }
    build $htmldir
}

depend clean latex2htmlclean
target latex2htmlclean ALWAYS_BUILD {
    foreach tex $::latex2html::MAINFILES {
	set deldir [ file rootname $tex ] 
	cmd rm -fr $deldir
    }
}
