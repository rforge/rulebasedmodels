# -*-Mode: tcl -*-

# =============================================================================
# gnuplot.tmk: tmk module for generating PostScript and LaTeX from xfig files
# (C) Wolfgang Heidrich (heidrich@cs.ubc.ca)
# =============================================================================
# $Log: xfig.tmk,v $
# Revision 1.2  2003/01/11 16:46:16  goesele
# updated version for pdflatex support
#
#
# =============================================================================

# should be empty on default
set_ifndef EXCLUDE           {}

# executables
set_ifndef FIG2DEV [exec which fig2dev]

# options
set_ifndef FIG2DEVFLAGS {}

# module config
set_ifndef USE_AUTO_PSTEX 1
set_ifndef USE_AUTO_PS 1
set_ifndef USE_AUTO_PNG 0
set_ifndef USE_AUTO_PDF 0

# this is the list of files we want to remove on a clean
set CLEANFILELIST {}


# On a make clean we remove all files that could be generated by this
# module.  This may not remove all files (e.g. when the .fig file is
# removed before tmk clean is called), but this is better than
# removing tex and eps files that we are not supposed to...
depend clean xfigclean
target xfigclean ALWAYS_BUILD {
    eval cmd rm -f $xfig::CLEANFILELIST
}

# do nothing - this is just to get the ARCH directory generated in time
target $xfig::CLEANFILELIST ALWAYS_BUILD {
}

# tex portion of the pstex output format
target *.tex {$ROOT.fig} {

    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname    $TARGET]

    cmd $xfig::FIG2DEV -L pstex_t -p $ROOT.eps $SRC $TARGET
}

# postscript portion of the pstex output format
target *.eps {$ROOT.fig} {

    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname    $TARGET]

    cmd $xfig::FIG2DEV -L pstex $SRC $TARGET
}

# PNG image
target *.png {$ROOT.fig} {
    
    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname    $TARGET]

    cmd $xfig::FIG2DEV -L png $SRC $TARGET
}
    
# PDF image
target *.pdf {$ROOT.fig} {
    
    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname    $TARGET]

    cmd $xfig::FIG2DEV -L pdf $SRC $TARGET
}
    
# standalone postscript: this is a little hacky because we only use
# the file extension (.ps versus .eps) for distinguishing between this
# and the pstex version
target *.ps {$ROOT.fig} {

    # this will NOT land in the $ARCH directory
    set TARGET [targetname_short $TARGET]
    set ROOT   [file rootname   $TARGET]

    cmd $xfig::FIG2DEV -L eps $SRC $TARGET
}


set GPLFILES [glob -nocomplain *.fig]

# loop over all possible files
foreach figfile $GPLFILES {

    set figname [file rootname $figfile].fig
    set texname [file rootname $figfile].tex
    set epsname [file rootname $figfile].eps
    set psname  [file rootname $figfile].ps
    set pngname [file rootname $figfile].png
    set pdfname [file rootname $figfile].pdf
    
    depend $texname $figname
    depend $epsname $figname
    depend $psname  $figname
    depend $pngname $figname
    depend $pdfname $figname
}

eval_later {

    # automatically build .tex and .eps files?
    if $USE_AUTO_PSTEX {
        set texfiles [lmap $GPLFILES {$IROOT.tex}]
        build [lminus $texfiles $EXCLUDE]
        set epsfiles [lmap $GPLFILES {$IROOT.eps}]
        build [lminus $epsfiles $EXCLUDE]

        set xfig::CLEANFILELIST [list {*}$xfig::CLEANFILELIST {*}$texfiles]
        set xfig::CLEANFILELIST [list {*}$xfig::CLEANFILELIST {*}$epsfiles]
    }

    # automatically build .ps's?
    if $USE_AUTO_PS {
        set psfiles [lmap $GPLFILES {$IROOT.ps}]
        build [lminus $psfiles $EXCLUDE]

        set $xfig::CLEANFILELIST [list {*}$xfig::CLEANFILELIST {*}$psfiles]
    }
    
    # automatically build .png's?
    if $USE_AUTO_PNG {
        set pngfiles [lmap $GPLFILES {$IROOT.png}]
        build [lminus $pngfiles $EXCLUDE]

        set $xfig::CLEANFILELIST [list {*}$xfig::CLEANFILELIST {*}$pngfiles]
    }

    # automatically build .pdf's?
    if $USE_AUTO_PDF {
        set pdffiles [lmap $GPLFILES {$IROOT.pdf}]
        build [lminus $pdffiles $EXCLUDE]

        set $xfig::CLEANFILELIST [list {*}$xfig::CLEANFILELIST {*}$pdffiles]
    }
	
}
