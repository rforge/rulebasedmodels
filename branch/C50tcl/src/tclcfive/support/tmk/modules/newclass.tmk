# -*-Mode: tcl -*-
# =============================================================================
# newclass.tmk: tmk module for creating files for new C++ classes
# (C)opyright 1999 by Hartmut Schirmacher (hartmut@acm.org)
# =============================================================================
# $Id: newclass.tmk,v 1.14 2000/08/08 07:06:11 htschirm Exp $
# =============================================================================
# $Log: newclass.tmk,v $
# Revision 1.14  2000/08/08 07:06:11  htschirm
# fixed names
#
# Revision 1.13  2000/08/04 12:11:14  ag4-adm
# converting AG4 proj
#
# Revision 1.12  2000/04/22 16:23:36  htschirm
# new names for user-visible function
#
# Revision 1.11  2000/04/20 11:38:01  htschirm
# lots of new names
#
# Revision 1.10  2000/04/10 14:52:16  htschirm
# replaced empty dependency lists by ALWAYS_BUILD
# =============================================================================

# root file name of the template files to be used
set_ifndef TEMPLATE_FILES $PROJDIR/newclass

# just call the procedure when the user says 'tmk newclass'
target newclass ALWAYS_BUILD {newclass::newclassProc}

# -------- some procedures that can be called inside the template file -------

# the compiler macro used to prevent multiple inclusions of the header file
proc hdr_define {} {
    return [string toupper ${::DIRTAIL}_${newclass::CLASSNAME}_H]
}
# the compiler macro used to prevent multiple inclusions of the source file
proc src_define {} {
    return [string toupper ${::DIRTAIL}_${newclass::CLASSNAME}_C]
}

# the compiler macro used to prevent multiple passes on non-templates
proc src_templates {} {
    return [string toupper ${::DIRTAIL}_${newclass::CLASSNAME}_TEMPLATES]
}

# the compiler #if used to prevent multiple passes on non-templates
proc src_template_if {} {
    if [llength $::newclass::TEMPLATE_ARGS] {
	return "// begin template definitions\n"
    }
    return {}
}

# the compiler #if used to prevent multiple passes on non-templates
proc src_template_endif {} {
    if [llength $::newclass::TEMPLATE_ARGS] {
	return "#ifndef [src_templates]\n  /* put all non-template definitions here */\n#endif"
    }
    return {}
}


# procedure for including the implementation if the header contains a template
proc gnu_template_include {suffix} {
    set prefix $::DIRTAIL
    if [llength $::newclass::TEMPLATE_ARGS] {
	set srcdef ${prefix}_${newclass::CLASSNAME}_$suffix
	set r {}
	append r "// include templates in header file (GNU compilers)\n"
	append r "#if defined(__GNUG__) && !defined([src_define])\n"
	append r "#define [src_templates]\n"
	append r "#include \"$newclass::CLASSNAME.$suffix\"\n"
	append r "#endif\n"
	return $r
    }
    return {}
}

# how to create files for a new class
proc newclassProc {} {

    # eval in global context
    uplevel \#0 [list namespace eval ::newclass {

	# get template file(s), do NOT read *~
	set templates [glob -nocomplain $TEMPLATE_FILES*]
	set templates [lminus $templates \
		[glob -nocomplain $TEMPLATE_FILES*~]]
	if {![llength $templates]} {
	    exit_msg "template files not found: $TEMPLATE_FILES.*"
	}
	
	# input necessary data
	if {![info exists CLASSNAME]} {
	    puts -nonewline "please enter class name (no template defs): "
	    flush stdout
	    gets stdin CLASSNAME
	    if {[llength $CLASSNAME] != 1} {
		exit_msg "class name must consist of a single word."
	    }
	}

	if {![info exists TEMPLATE_ARGS]} {
	    puts -nonewline "template arguments: "
	    flush stdout
	    gets stdin TEMPLATE_ARGS
	
	}

	if {![info exists TEMPLATE_TYPE]} {
	    if [llength $TEMPLATE_ARGS] {
		set TEMPLATE_TYPE <$TEMPLATE_ARGS>
	    } else {
		set TEMPLATE_TYPE   {}
	    }
	}

	if {![info exists TEMPLATE_NAMES]} {
	    if [llength $TEMPLATE_ARGS] {
		# split into args (,-separated)
		set x [split $TEMPLATE_ARGS ,]
		# only take arg name, not type
		set x [lmap $x {[lindex $ITEM 1]}]
		# re-introduce ","
		regsub -all { } $x , x
		set TEMPLATE_NAMES <$x>
	    } else {
		set TEMPLATE_NAMES {}
	    }
	}

	if {![info exists TEMPLATE_DEF]} {
	    if [llength $TEMPLATE_ARGS] {
		set TEMPLATE_DEF template<$TEMPLATE_ARGS>
	    } else {
		set TEMPLATE_DEF {}
	    }
	}
	
	if {![info exists DESCRIPTION]} {
	    puts -nonewline "brief description (for file + class): "
	    flush stdout
	    gets stdin DESCRIPTION
	}
	
	# get some info about author etc.
	set USERNAME [exec whoami]
	if [catch "set CREATOR \[exec ypmatch $USERNAME passwd | cut -d: -f5 | cut -d, -f1\]" msg] {
	    if [catch "set CREATOR \[exec grep $USERNAME /etc/passwd | cut -d: -f5 | cut -d, -f1\]" msg] {
		set CREATOR {}
	    }
	}

	# CVS stuff
	set CVSID  \$Id$
	set CVSLOG \$Log$

	# replace class name etc. in every string
	foreach tempfile $templates {
	
	    # infer filename from classname and extension of template
	    set SUFFIX   [string range [file extension $tempfile] 1 end]
	    set FILENAME [string trim $CLASSNAME.$SUFFIX]
	    puts "creating $FILENAME"
	    set f [open $FILENAME w]
	
	    # get template text
	    set temp [exec cat $tempfile]
	
	    # read and replace all [@@ ... @@] directives
	    set p 1
	    while {$p != -1} {
		
		# find \[@@
		set p [string first \[@@ $temp]
		if {$p != -1} {
		
		    # find @@]
		    set q [string first @@\] $temp]
		    if {$q < $p} {
			set s [string range $temp $p [expr $q+3]]
			exit_msg "garbled \[@@ ... @@\] expression:\n$s"
		    }
		
		    # eval command in between
		    set cmd [string range $temp [expr $p+3] [expr $q-1]]
		    dbg_msg "expanding expression $cmd"
		    set txt {}
		    eval append txt $cmd
		    set left  [string range $temp 0 [expr $p-1]]
		    set right [string range $temp [expr $q+3] end]
		    set temp $left$txt$right
		
		}
	    }

	    puts $f $temp
	    close $f
	}
    }]
}
