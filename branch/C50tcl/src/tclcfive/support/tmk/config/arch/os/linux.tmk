# ==========================================================================
# $Id: linux.tmk,v 1.14 2008/04/21 12:04:07 cfuchs_sf Exp $
# architecture-dependent config for Linux
# ==========================================================================
# $Log: linux.tmk,v $
# Revision 1.14  2008/04/21 12:04:07  cfuchs_sf
# added cuda stuff
#
# Revision 1.13  2004/08/09 14:29:34  yamauchih
# integrate duplicated codes in config/arch/os/linux.tmk and config/arch/sysinfo/unix.tmk
#
# Revision 1.12  2004/08/08 18:20:03  yamauchih
# get distribution name based on lsb_release.
#
# Revision 1.11  2002/11/18 11:06:55  brabec
# *** empty log message ***
#
# Revision 1.10  2002/04/19 08:10:47  brabec
# added qt support for gcc3
#
# Revision 1.9  2001/10/31 18:56:10  ag4-adm
# added debug info about NVIDIA drivers
#
# Revision 1.8  2001/02/20 16:02:04  brabec
# added PGI compiler support (experimental)
#
# Revision 1.7  2001/01/22 10:23:10  botsch
# Mario ist doof
#
# Revision 1.6  2001/01/14 15:47:35  htschirm
# changes during Hartmut's stay at Phil's lab
#
# Revision 1.5  2000/11/01 15:32:47  htschirm
# added ::arch_name, removed DEFAULT_ARCH
#
# Revision 1.4  2000/09/26 09:20:41  brabec
# fixed linux graphics driver support
#
# Revision 1.3  2000/08/07 15:29:22  htschirm
# *** empty log message ***
#
# Revision 1.2  2000/08/01 14:53:08  htschirm
# SuSE
#
# Revision 1.1  2000/08/01 14:45:49  htschirm
# new config tree structure
#
# Revision 1.3  2000/07/20 16:55:07  brabec
# correct handling of DISTVER (added MAJORVER and MINORVER)
#
# Revision 1.2  2000/07/20 16:15:53  htschirm
# towards tmk release 0.9
#
# ==========================================================================

assert {![string compare $OS Linux]}
dbg_msg "reading [info script]." 1

# list of available compilers, and preferred default compiler
config set ::cxx::COMPILERS { gcc icc pgi nvcc }
config set ::cxx::COMPILER  gcc
config set ::c::COMPILERS   { gcc icc pgi nvcc }
config set ::c::COMPILER    gcc 

# standard GUI on Linux is x11
config set ::gui::DEPEND x11

# currently no config helpers
config set ::CONFIG_HELPERS {}

# find out which kind of Linux distribution we have here
config set LINUX_DIST unknown
config set LINUX_DISTVER {}

# ::DIST and ::DISTVER is set by <tmk>/config/arch/sysinfo/unix.tmk. 
# (which calls unix_linux_sysinfo.tmk)
if { [info exists ::DIST ] } {
    config set LINUX_DIST $::DIST
} else {
    dbg_msg "DIST is not defined, forget to source tmk/config/arch/sysinfo/unix.tmk?"
}
if {[info exists ::DISTVER]} {
    config set LINUX_DISTVER $::DISTVER
}

# resolve major and minor version number 
if [regexp \(\[0-9\]+\)\.\(\[0-9\]+\) $LINUX_DISTVER allVer majVer minVer] {
    config set LINUX_DIST_MAJORVER $majVer
    config set LINUX_DIST_MINORVER $minVer
} else {
    config set LINUX_DIST_MAJORVER 0
    config set LINUX_DIST_MINORVER 0
}

config set ::FILECOMPRESSOR    ::compress_target_gzip
config set ::FILECOMPRESSOR_PRG gzip
config set ::FILECOMPRESSOR_ARGS -9

config proc ::compress_target_gzip {target} {
    global ::FILECOMPRESSOR_PRG
    global ::FILECOMPRESSOR_ARGS


    if {[info exists ::env(TMK_USE_COMPRESSION)] == 0} {
	return
    }

    foreach i $target {
	puts "doing $i"
	if {[file extension $i] eq [::filename_obj {}] && \
		[file exists $i.gz] == 0} {
	    set  size_old [file size $i]
	    set  oldtime [file mtime $i]
	    exec $::FILECOMPRESSOR_PRG $::FILECOMPRESSOR_ARGS -f $i
	    file mtime $i.gz $oldtime
	    set  size_new [file size $i.gz]
	    puts "compressed: $i ([format %2.1f [expr ($size_new * 100.0)/($size_old * 1.0)]] \%)"
	}
    }
}
    
# since different distributions use different glibc versions etc, 
#   use the distribution name for the output directory 
if {$LINUX_DIST ne "unknown"} {
    log_msg "using Linux distribution name for architecture directory" 

    config proc ::arch_name {codelevel} {
	if {($codelevel eq "dbg") || ($codelevel eq {})} {
	    set cl {}
	} else {
	    set cl _$codelevel
	}
	return ${::LINUX_DIST}${::LINUX_DISTVER}$cl
    }
}

config set LINUX_GRAPHICS unknown
# nVIDIA graphics drivers?
set has_nv_mod 0
catch {set has_nv_mod [expr [string first NVdriver [exec lsmod]] != -1]}
if $has_nv_mod {
    config set LINUX_GRAPHICS nvidia
    log_msg "found NVIDIA graphics module"
} else {
    log_msg "*** no NVIDIA graphics module found (see lsmod)!"
}

# SGI VPro for linux ?
set has_vpro_mod 0
catch {set has_vpro_mod [expr [string first sgivpro [exec lsmod]] != -1]}
if $has_vpro_mod {
    config set LINUX_GRAPHICS sgivpro
}

