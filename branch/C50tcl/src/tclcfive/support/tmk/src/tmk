#!/bin/sh
# -*-Mode: tcl -*-
#\
# if [ -f /HPS/opt/lib/uncompress.o ];then TMK_USE_COMPRESSION=1;LD_PRELOAD=/HPS/opt/lib/uncompress.o; fi; \
exec ${TMK_TCLSH:=tclsh} "$0" "$@"
# =========================================================================
# Copyright (C) 1999-2005  Hartmut Schirmacher, Stefan Brabec
#                          Hendrik Lensch, Hitoshi Yamauchi
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (LICENSE.TXT); if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# ===========================================================================
# $Id: tmk,v 1.133 2006/11/23 17:12:24 yamauchih Exp $
# core of the tmk system
# ===========================================================================
# $Log: tmk,v $
# Revision 1.133  2006/11/23 17:12:24  yamauchih
# show module name during reading it
#
# Revision 1.132  2005/11/27 16:13:55  yamauchih
# fix: ::tmk::MODULE_PATH is a string
#
# Revision 1.131  2005/10/21 21:57:07  yamauchih
# add ::tmk::MODULE_PATH
#
# Revision 1.130  2005/07/06 21:28:10  yamauchih
# add -nomakef option
#
# Revision 1.129  2005/04/23 23:25:41  yamauchih
# add runmode +folloegccname
#
# Revision 1.128  2005/04/23 20:53:58  yamauchih
# add runmode to build 64bit executables
#
# Revision 1.127  2003/09/29 10:18:23  lensch
# executables are now created even for the parallel version at the first run
#
# Revision 1.126  2002/12/12 13:46:20  brabec
# *** empty log message ***
#
# Revision 1.125  2002/12/12 13:06:39  brabec
# fixed thread model
#
# Revision 1.124  2002/12/10 13:34:05  brabec
# *** empty log message ***
#
# Revision 1.123  2002/12/09 20:13:59  brabec
# fixed dependency stuff for Visual C++
#
# ===========================================================================
# code comments:
# - precede every internal global name with __ to avoid conflicts with 
#   user-defined global names
# ===========================================================================

# version check (need tclsh 8.x)
if {[lindex [split [info tclversion] \.] 0] < 8} {
    puts stderr "tmk needs a more recent version of 'tclsh' (8.x)"
    puts stderr "please upgrade / set TMK_TCLSH"
    exit 1
}

namespace eval ::tmk {
    # CVS determines the core version 
    variable CoreVersion [lindex {$Revision: 1.133 $} 1]
    # the release number is set manually
    variable Release {1.0.1}
}

# search a file (pattern) in a number of directories; 
#   return list of found files
proc find_in_pathlist {filepattern pathlist} {

    set full_name_list [list]
    foreach i $filepattern {
	#don't have lmap at this point
	foreach path $pathlist {
	    lappend full_name_list [file join $path $i]
	}
    }
    set result [list]

    foreach item $full_name_list {
	if {[file exists $item]} {
	    lappend result $item
	}
    }
    if {[llength $result] > 0} {
	dbg_msg "found: $result" 3
    } else {
	dbg_msg "file $filepattern not found in any of: $pathlist" 2
    }
    return $result
}

# =============================================================================
# determine absolute path in which this script resides
# =============================================================================
proc ::tmk::scriptname {} {
    # already an absolute path? -> finished
    set name [info script]
    set pt   [file pathtype $name] 
    if {$pt ne "absolute"} {

	# no path? -> search in $env(PATH)
	if {[llength [file split $name]] == 1} {
	    set w [lindex [find_in_pathlist $name $::env(PATH)] 0]
	    if {$w eq {}} {
		exit_msg "could not find tmk script in path.\n  please set the TMK_HOME environment variable." 
	    }
	} else {
	    # relative path, insert [pwd]
	    switch $pt {
		relative {
		    set name [file join [pwd] $name]
		}
		volumerelative {
		    foreach vol [file volumes] {
			set found 0
			set path [file join $vol $name]
			if [file exists $path] {
			    set name $path ; set found 1 ; break
			}
		    }
		    if {!$found} {
			exit_err "could not determine absolute path for $name."
		    }
		}
	    }
	}
    }

    # now we know the absolute path; we only have to follow links to the end
    while {[file type $name] eq "link"} {
	set link [file readlink $name]
	if {[file pathtype $link] eq "relative"} {
	    # relative in that case means relative to dir in which link resides
	    set name [file join [file dirname $name] $link]
	} else {
	    set name $link
	}
    }
    
    return [normalize_filename $name]
}

proc ::tmk::tmkdir {} {
    if {[catch {set ::tmk::dir $::env(TMK_HOME)}]} {
        set mydir [file dirname [file dirname $::tmk::Script]]
        foreach maybe [list . [file join share tmk]] {
            set found 0
            set maybe [file normalize [file join $mydir $maybe]]
            if {[file exists [file join $maybe config config.tmk]] &&
                [file exists [file join $maybe contrib cgi]] &&
                [file exists [file join $maybe modules modules.tmk]] &&
                [file exists [file join $maybe tools arg_tester]]
            } {
                return $maybe
            }
        }
        return -code error "Could not find tmk installation directory!"
    } 
}

# trim a filename and:
#   - "//" -> "/"
#   - "./" -> {}
#   - "x/.." -> {}
#   - remove trailing "/"'s
proc normalize_filename {file} {
    return [normalize_filevar file]
}
# change the variable named _file
proc normalize_filevar {_file} {

    upvar $_file path

    # split into segments
    set path [file split $path]

    # remove ./ if it's not the only thing 
    set p [lsearch -exact $path .]
    while {([llength $path] > 1) && ($p != -1)} {
	set path [lreplace $path $p $p]
	set p [lsearch -exact $path .]
    }

    # collapse ".."
    set p [lsearch -exact [lrange $path 1 end] ..]
    while {$p !=-1} {
	set path [lreplace $path [expr $p] [expr $p + 1]]
	set p [lsearch -exact [lrange $path 1 end] ..]
    }

    # re-construct path from segments
    set path [eval file join $path]

    return $path
}


# ========================================================================
# tmk general state init
# ========================================================================

#string constants
set STR_DEFAULT default
set STR_CYGWIN cygwin
set STR_DARWIN Darwin
set STR_GCC gcc
set STR_IRIX IRIX
set STR_IRIX64 IRIX64
set STR_LINUX Linux
set STR_MACINTOSH macintosh
set STR_SUNOS SunOS
set STR_UNIX unix
set STR_WINDOWS windows
set CL_DBG dbg
set CL_PRF prf
set CL_STD std
set CL_OPT opt
set CL_MAX max


# list of traced variables
set ::tmk::traced_vars {}
    
# system check (pre-config, just for file name conventions etc.)
set __System [string tolower $tcl_platform(os)]
if {$__System eq {}} {set __Sytem <unknown>}

# windows, cygwin? 
set __IsWindowsSystem [string match *$STR_WINDOWS* $__System]

#indicates that a sytem was invoked in a Cygwin environmnet #if program is
#invoked from a Windows environment, willbe false, even if cygwin commands are
#reachable
set __IsCygwinSystem  0
if {[string match *$STR_CYGWIN* __System]} {
    set __IsCygwinSystem 1
}

#using check of __System instead of this, py, 2012
#if {[auto_execok ls] ne {}} { 
#}
#if {[auto_execok cygpath] ne {}} {
#    set __IsCygwinSystem 1
#}

# our registry key for the user cache
set __HKeyUser {HKEY_CURRENT_USER\Software\TMK\Cache}

# we have not yet started to build targets
set __AlreadyBuilding 0
# debugging level (0 = off, 1 ...)
set __DbgLevel 0 
# switch command logging on/off (cf. -verbose / -silent)
set __DoLog   1
# switch shell command execution on/off
set __DoCmd   1
# always include TMakefile as dependency?
set __SelfDepend   0
# force explicit targets to be created unconditionally
set __ForceBuilding 0
# only output commands, don't really execute them
set __DisplayCommandsOnly 0
# force re-configuration (rebuilds config cache)
set __ForceReconfig 0
set __SysInfoOnly 0
# order in which to process subdirectories: "bottom-up", "top-down", or "none"
set ::SUBDIR_PROCESSING bottom-up

# code generation level
set ::CODELEVEL $CL_OPT

set ::USE_ARCH  1
set ::TARGETS   {}
set ::MODULES   {}
set ::EXCLUDE   {}
set ::tmk::SUBDIRS {}
set ::tmk::LOCALTARGETS {}
# additional module path
set ::tmk::MODULE_PATH [list]

set __BBProcs          {}               ; # code stored by "eval_later"
set __OutputPrefix     tmk:             ; # important for parallel processing
set __OutputPrefixConfig  tmk-config:          
set __Makefilename     TMakefile        ; # name of the file to be sourced in
set __ProjectMakefile  {}               ; # project-wide 'global' definitions
set __PrivateProjectMakefile  {}        ; # private 'global' definitions
set __ReadMakefileOn   1                ; # do not read TMakefile when 0
set __ExecBefore       {}               ; # code stored by "-cmd 'code'" option
set __ExecInit         {}               ; # code stored by "-init 'code'" option
set __ParProcesses     -1
set __DefaultProjectFileName         TMakefile.proj
set __DefaultPrivateProjectFileName  TMakefile.priv
# available run modes
set __AvailableRunModeStatList(addressmode) {default 64bit}
set __AvailableRunModeStatList(archmode) \
   {+followgccname norunmodepref +gccver}
# current run mode
set __RunModeStatList(addressmode)           $STR_DEFAULT
set __RunModeStatList(archmode)              +followgccname
set __RunModeStatList(gccexename)            gcc

#if $__IsWindowsSystem {
#    puts  stderr "sorry, but Windows is not supported in this beta release."
#    exit 1
#}
# if {[regexp {[mM]acintosh} $__System]} {
#     exit_msg "sorry, but Macintosh is not supported in this beta release."
# }    

# on Windows, should use the registry packagex
set __UseRegistry 0
if {$__IsWindowsSystem} {
    if {0 == [catch {package require registry}]} {
	set __UseRegistry 1
    } else {
	dbg_msg "warning: could not load 'registry' package"
    }
}

# =====================
# paths / config
# =====================

# the directory where tmk is installed. used for finding modules etc.
set ::tmk::Script [::tmk::scriptname]
set ::tmk::dir [::tmk::tmkdir]

#bootstrap when run from source directory
if {[file exists [file join $::tmk::dir pkgIndex.tcl]]} {
   set auto_path [linsert $auto_path 0 $::tmk::dir]
}
package require tmk

set ::tmk::dir_src        [file join $::tmk::dir src]
set ::tmk::dir_config     [file join $::tmk::dir config]
set ::tmk::dir_contrib    [file join $::tmk::dir contrib] 
set ::tmk::dir_priv       [file join $::tmk::dir usr]
catch {set ::tmk::dir_priv [file join $env(HOME) .tmk]}

if {![info exists env(TMK_TCLSH)]} {
	set env(TMK_TCLSH) [info nameofexecutable]
}
# set TMK to the right tclsh call
set TMK [list $env(TMK_TCLSH) $::tmk::Script]

#
# set TMK_RUNMODE if it exists. command line can override this.
#
if {[info exists env(TMK_RUNMODE)]}  {
    set runmode $env(TMK_RUNMODE)
    foreach {key val} $runmode {
	if [::tmk::set_runmodestat $key $val] {
	    dbg_msg "set runmode TMK_RUNMODE ${key}." 1
	} else {
	    log_msg "Non supported TMK_RUNMODE (${key}), ignored."	
	}
    }
}

# ===============
# tmk main action
# ===============

proc ::tmk::Main {argv0 argv} {
    
    # parse command line and remember things to do later
    __ParseCommandLine $argv0 $argv

    # exec commands specified with -init 'proc' 
    global __ExecInit
    foreach cmd $__ExecInit {uplevel \#0 $cmd}

    # make known all global variables starting with __
    eval global ::ARGS ::TARGETS ::ARCH ::PROJDIR [info globals __*]

    # do configuration
    set cfg [file join ${::tmk::dir_config} config.tmk]
    if {[file readable $cfg]} {
	uplevel \#0 [list __source $cfg]
    } else {
	puts stdout "warning: main configuration file $cfg missing"
    }
   
    # remove outer spaces and trailing slashes from ARCH variable
    normalize_filevar ARCH

    # read definition of the module "macro" action for certain variables
    uplevel \#0 [list __source \
	[file join ${::tmk::dir_src} module_macro_vars.tmk]]

    # read definition of the module "threads" 
    uplevel \#0 [list __source [file join ${::tmk::dir_src} module_threads.tmk]]


    # find project and private makefile, set PROJDIR etc.
    # but do not yet execute these files
    set mfs [__FindGlobalMakefiles]

    # load default module
    module default

    # exec commands specified with -cmd'proc' 
    foreach cmd $__ExecBefore {uplevel \#0 $cmd}

    # read and execute proj/priv makefiles
    foreach mf $mfs {
	set olddir [pwd]
	cd $PROJDIR
	__ReadMakefile $mf
	cd $olddir
    }

    # mark specified targets as updated/untouched
    lappend __mark_updated ALWAYS_BUILD
    foreach t $__mark_updated   {target_updated   $t 0 1}
    foreach t $__mark_untouched {target_untouched $t 0 1}

    #  read / parse / execute the specified TMakefile
    if {$__ReadMakefileOn} {
	if {[string equal $__Makefilename -]} {
	    log_msg "now entering tmk's interactive mode (leave with ^D)..."
	    source [file join ${::tmk::dir_src} interactive.tmk]
	} else {
	    __ReadMakefile $__Makefilename
	}
    } else {
	dbg_msg "no read TMakefile" 3
    }
    
    # execute commands wrapped in eval_later 
    __doEvalLaterCommands

    # if targets are spec'd on the cmd line, process only those.
    if {[llength $__CmdLineTargets] > 0} {
	set TARGETS $__CmdLineTargets
    }

    # split local-only and normal targets
    set __cond {[lcontains $::tmk::LOCALTARGETS {[targetname_short $ITEM]}]}
    set ::tmk::localtargets  [lfilter $TARGETS $__cond]
    
    set ::tmk::normaltargets [lfilter $TARGETS !$__cond]
    # where are we?
    if {[llength $::tmk::normaltargets] || ![llength $::tmk::localtargets]} {
	log_msg {} noprefix
	log_msg "in directory [pwd]"
    }

    # bottom-up? then process subdirectories now, before the local targets
    if {$::SUBDIR_PROCESSING eq "bottom-up"} {::tmk::process_subdirs}
    # only output rule database 
    set_ifndef ::tmk::todo {}
    if {[lsearch -exact $::tmk::todo rules] != -1} {
	__OutputRules stdout
	return
    }
    
    # only do the building if "todo" list is empty.
    if {[llength $::tmk::todo] == 0} {

	# go through explicit list of targets and build them
	if {[llength $TARGETS] > 0} {
	    
	    dbg_msg "toplevel targets: $TARGETS"

	    foreach target $TARGETS {
		
		set result [__Build target msg]
		if {$result eq "failed"} {
		    exit_msg $msg
		} elseif {$result eq "untouched"} {
		    log_msg "nothing to be done for $target"
		} elseif {$result eq "exclude"} {
		    log_msg "$target skipped due to exclusion"
		}
	    }
	    
	} else {

	    log_msg "no targets in [pwd]."
	    
	}
    }

    # top-down? then process subdirectories now, after the local targets
    if {$::SUBDIR_PROCESSING eq "top-down"} {::tmk::process_subdirs}

} 

if {! [info exists __TmkInSubdir]} {
    set __TmkStartTime [clock seconds]
}

#in case tmk was sourced instead of executed
if {![info exists argv0]} {
	set argv0 [info script]
}
if {![info exists argv]} {
	set argv [list]
}
::tmk::Main $argv0 $argv
	
# waiting for all relevant threads to finish 
if $::__UseThreads {
    if {[::tmk::wait_for_threads_name $::__RunningThreads]} {
	exit_msg "at least on thread failed"
    }
}
 
if {! [info exists __TmkInSubdir]} {
    set __TmkRunningTime [expr [clock seconds] - $__TmkStartTime]
    log_msg "finished [format %.0f [expr $__TmkRunningTime / 60.0]] min [expr $__TmkRunningTime % 60] sec."
}

